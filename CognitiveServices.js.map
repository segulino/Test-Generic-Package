{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap f8f721a28163318fd834","webpack:///./~/microsoft-speech-browser-sdk/src/common/Exports.ts","webpack:///./~/microsoft-speech-browser-sdk/src/common/Error.ts","webpack:///./~/microsoft-speech-browser-sdk/src/common/Guid.ts","webpack:///./~/tslib/tslib.es6.js","webpack:///./~/microsoft-speech-browser-sdk/src/common.browser/Exports.ts","webpack:///./~/microsoft-speech-browser-sdk/src/common/PlatformEvent.ts","webpack:///./~/microsoft-speech-browser-sdk/src/sdk/speech/Exports.ts","webpack:///./~/microsoft-speech-browser-sdk/src/sdk/speech/IAuthentication.ts","webpack:///./~/microsoft-speech-browser-sdk/src/sdk/speech/RecognitionEvents.ts","webpack:///./~/microsoft-speech-browser-sdk/src/common.browser/WebsocketMessageAdapter.ts","webpack:///./~/microsoft-speech-browser-sdk/src/common/ConnectionMessage.ts","webpack:///./~/microsoft-speech-browser-sdk/src/common/EventSource.ts","webpack:///./~/microsoft-speech-browser-sdk/src/common/InMemoryStorage.ts","webpack:///./~/microsoft-speech-browser-sdk/src/common/List.ts","webpack:///./~/microsoft-speech-browser-sdk/src/common/Promise.ts","webpack:///./~/microsoft-speech-browser-sdk/src/common/Queue.ts","webpack:///./~/microsoft-speech-browser-sdk/src/sdk/speech.browser/SpeechConnectionFactory.ts","webpack:///./~/microsoft-speech-browser-sdk/src/sdk/speech/RecognizerConfig.ts","webpack:///./src/Konsole.ts","webpack:///./src/CognitiveServices/SpeechRecognition.ts","webpack:///./src/CognitiveServices/SpeechSynthesis.ts","webpack:///./~/microsoft-speech-browser-sdk/Speech.Browser.Sdk.ts","webpack:///./~/microsoft-speech-browser-sdk/src/common.browser/ConsoleLoggingListener.ts","webpack:///./~/microsoft-speech-browser-sdk/src/common.browser/FileAudioSource.ts","webpack:///./~/microsoft-speech-browser-sdk/src/common.browser/LocalStorage.ts","webpack:///./~/microsoft-speech-browser-sdk/src/common.browser/MicAudioSource.ts","webpack:///./~/microsoft-speech-browser-sdk/src/common.browser/OpusRecorder.ts","webpack:///./~/microsoft-speech-browser-sdk/src/common.browser/PCMRecorder.ts","webpack:///./~/microsoft-speech-browser-sdk/src/common.browser/SessionStorage.ts","webpack:///./~/microsoft-speech-browser-sdk/src/common.browser/Timer.ts","webpack:///./~/microsoft-speech-browser-sdk/src/common.browser/WebsocketConnection.ts","webpack:///./~/microsoft-speech-browser-sdk/src/common/AudioSourceEvents.ts","webpack:///./~/microsoft-speech-browser-sdk/src/common/ConnectionEvents.ts","webpack:///./~/microsoft-speech-browser-sdk/src/common/ConnectionOpenResponse.ts","webpack:///./~/microsoft-speech-browser-sdk/src/common/Events.ts","webpack:///./~/microsoft-speech-browser-sdk/src/common/IConnection.ts","webpack:///./~/microsoft-speech-browser-sdk/src/common/RawWebsocketMessage.ts","webpack:///./~/microsoft-speech-browser-sdk/src/common/RiffPcmEncoder.ts","webpack:///./~/microsoft-speech-browser-sdk/src/common/Storage.ts","webpack:///./~/microsoft-speech-browser-sdk/src/common/Stream.ts","webpack:///./~/microsoft-speech-browser-sdk/src/sdk/speech.browser/Exports.ts","webpack:///./~/microsoft-speech-browser-sdk/src/sdk/speech.browser/Recognizer.ts","webpack:///./~/microsoft-speech-browser-sdk/src/sdk/speech/CognitiveSubscriptionKeyAuthentication.ts","webpack:///./~/microsoft-speech-browser-sdk/src/sdk/speech/CognitiveTokenAuthentication.ts","webpack:///./~/microsoft-speech-browser-sdk/src/sdk/speech/Recognizer.ts","webpack:///./~/microsoft-speech-browser-sdk/src/sdk/speech/ServiceTelemetryListener.Internal.ts","webpack:///./~/microsoft-speech-browser-sdk/src/sdk/speech/SpeechConnectionMessage.Internal.ts","webpack:///./~/microsoft-speech-browser-sdk/src/sdk/speech/SpeechResults.ts","webpack:///./~/microsoft-speech-browser-sdk/src/sdk/speech/WebsocketMessageFormatter.ts","webpack:///./src/CognitiveServices/lib.ts","webpack:///(webpack)/buildin/system.js"],"names":[],"mappings":"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","file":"./CognitiveServices.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"CognitiveServices\"] = factory();\n\telse\n\t\troot[\"CognitiveServices\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 59);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f8f721a28163318fd834","\nexport * from \"./AudioSourceEvents\";\nexport * from \"./ConnectionEvents\";\nexport * from \"./ConnectionMessage\";\nexport * from \"./ConnectionOpenResponse\";\nexport * from \"./Error\";\nexport * from \"./Events\";\nexport * from \"./EventSource\";\nexport * from \"./Guid\";\nexport * from \"./IAudioSource\";\nexport * from \"./IConnection\";\nexport * from \"./IDetachable\";\nexport * from \"./IDictionary\";\nexport * from \"./IDisposable\";\nexport * from \"./IEventSource\";\nexport * from \"./IKeyValueStorage\";\nexport * from \"./InMemoryStorage\";\nexport * from \"./ITimer\";\nexport * from \"./IWebsocketMessageFormatter\";\nexport * from \"./List\";\nexport * from \"./PlatformEvent\";\nexport * from \"./Promise\";\nexport * from \"./Queue\";\nexport * from \"./RawWebsocketMessage\";\nexport * from \"./RiffPcmEncoder\";\nexport * from \"./Storage\";\nexport * from \"./Stream\";\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/common/Exports.ts","\n/**\n * The error that is thrown when an argument passed in is null.\n *\n * @export\n * @class ArgumentNullError\n * @extends {Error}\n */\nexport class ArgumentNullError extends Error {\n\n    /**\n     * Creates an instance of ArgumentNullError.\n     *\n     * @param {string} argumentName Name of the argument that is null\n     *\n     * @memberOf ArgumentNullError\n     */\n    public constructor(argumentName: string) {\n        super(argumentName);\n        this.name = \"ArgumentNull\";\n        this.message = argumentName;\n    }\n}\n\n/**\n * The error that is thrown when an invalid operation is performed in the code.\n *\n * @export\n * @class InvalidOperationError\n * @extends {Error}\n */\n// tslint:disable-next-line:max-classes-per-file\nexport class InvalidOperationError extends Error {\n\n    /**\n     * Creates an instance of InvalidOperationError.\n     *\n     * @param {string} error The error\n     *\n     * @memberOf InvalidOperationError\n     */\n    public constructor(error: string) {\n        super(error);\n        this.name = \"InvalidOperation\";\n        this.message = error;\n    }\n}\n\n/**\n * The error that is thrown when an object is disposed.\n *\n * @export\n * @class ObjectDisposedError\n * @extends {Error}\n */\n// tslint:disable-next-line:max-classes-per-file\nexport class ObjectDisposedError extends Error {\n\n    /**\n     * Creates an instance of ObjectDisposedError.\n     *\n     * @param {string} objectName The object that is disposed\n     * @param {string} error The error\n     *\n     * @memberOf ObjectDisposedError\n     */\n    public constructor(objectName: string, error?: string) {\n        super(error);\n        this.name = objectName + \"ObjectDisposed\";\n        this.message = error;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/common/Error.ts","\nconst CreateGuid: () => string = (): string => {\n    let d = new Date().getTime();\n    const guid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c: string) => {\n        const r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c === \"x\" ? r : (r & 0x3 | 0x8)).toString(16);\n    });\n\n    return guid;\n};\n\nconst CreateNoDashGuid: () => string = (): string => {\n    return CreateGuid().replace(new RegExp(\"-\", \"g\"), \"\").toUpperCase();\n};\n\nexport { CreateGuid, CreateNoDashGuid };\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/common/Guid.ts","/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n/* global Reflect, Promise */\n\nvar extendStatics = Object.setPrototypeOf ||\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\nexport function __extends(d, b) {\n    extendStatics(d, b);\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n}\n\nexport function __rest(s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __metadata(metadataKey, metadataValue) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\n\nexport function __generator(thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n}\n\nexport function __exportStar(m, exports) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\n\nexport function __values(o) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\n    if (m) return m.call(o);\n    return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n}\n\nexport function __read(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n}\n\nexport function __spread() {\n    for (var ar = [], i = 0; i < arguments.length; i++)\n        ar = ar.concat(__read(arguments[i]));\n    return ar;\n}\n\nexport function __await(v) {\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n    var i, p;\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\n}\n\nexport function __asyncValues(o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator];\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tslib/tslib.es6.js\n// module id = 3\n// module chunks = 0","\nexport * from \"./ConsoleLoggingListener\";\nexport * from \"./IRecorder\";\nexport * from \"./LocalStorage\";\nexport * from \"./MicAudioSource\";\nexport * from \"./FileAudioSource\";\nexport * from \"./OpusRecorder\";\nexport * from \"./PCMRecorder\";\nexport * from \"./SessionStorage\";\nexport * from \"./Timer\";\nexport * from \"./WebsocketConnection\";\nexport * from \"./WebsocketMessageAdapter\";\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/common.browser/Exports.ts","import { CreateNoDashGuid } from \"./Guid\";\nimport { IStringDictionary } from \"./IDictionary\";\n\nexport enum EventType {\n    Debug,\n    Info,\n    Warning,\n    Error,\n}\n\nexport class PlatformEvent {\n    private name: string;\n    private eventId: string;\n    private eventTime: string;\n    private eventType: EventType;\n    private metadata: IStringDictionary<string>;\n\n    constructor(eventName: string, eventType: EventType) {\n        this.name = eventName;\n        this.eventId = CreateNoDashGuid();\n        this.eventTime = new Date().toISOString();\n        this.eventType = eventType;\n        this.metadata = { };\n    }\n\n    public get Name(): string {\n        return this.name;\n    }\n\n    public get EventId(): string {\n        return this.eventId;\n    }\n\n    public get EventTime(): string {\n        return this.eventTime;\n    }\n\n    public get EventType(): EventType {\n        return this.eventType;\n    }\n\n    public get Metadata(): IStringDictionary<string> {\n        return this.metadata;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/common/PlatformEvent.ts","\n// IMPORTANT - Dont publish internal modules.\n\nexport * from \"./CognitiveSubscriptionKeyAuthentication\";\nexport * from \"./CognitiveTokenAuthentication\";\nexport * from \"./IAuthentication\";\nexport * from \"./IConnectionFactory\";\nexport * from \"./RecognitionEvents\";\nexport * from \"./Recognizer\";\nexport * from \"./RecognizerConfig\";\nexport * from \"./SpeechResults\";\nexport * from \"./WebsocketMessageFormatter\";\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/sdk/speech/Exports.ts","import { Promise } from \"../../common/Exports\";\n\nexport interface IAuthentication {\n    Fetch(authFetchEventId: string): Promise<AuthInfo>;\n    FetchOnExpiry(authFetchEventId: string): Promise<AuthInfo>;\n}\n\nexport class AuthInfo {\n    private headerName: string;\n    private token: string;\n\n    public constructor(headerName: string, token: string) {\n        this.headerName = headerName;\n        this.token = token;\n    }\n\n    public get HeaderName(): string {\n        return this.headerName;\n    }\n\n    public get Token(): string {\n        return this.token;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/sdk/speech/IAuthentication.ts","import { EventType, PlatformEvent } from \"../../common/Exports\";\nimport {\n    IDetailedSpeechPhrase,\n    ISimpleSpeechPhrase,\n    ISpeechEndDetectedResult,\n    ISpeechFragment,\n    ISpeechStartDetectedResult,\n} from \"./SpeechResults\";\n\nexport class SpeechRecognitionEvent extends PlatformEvent {\n    private requestId: string;\n\n    constructor(eventName: string, requestId: string, eventType: EventType = EventType.Info) {\n        super(eventName, eventType);\n\n        this.requestId = requestId;\n    }\n\n    public get RequestId(): string {\n        return this.requestId;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class SpeechRecognitionResultEvent<TResult> extends SpeechRecognitionEvent {\n    private result: TResult;\n\n    constructor(eventName: string, requestId: string, result: TResult) {\n        super(eventName, requestId);\n        this.result = result;\n    }\n\n    public get Result(): TResult {\n        return this.result;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class RecognitionTriggeredEvent extends SpeechRecognitionEvent {\n    private audioSourceId: string;\n    private audioNodeId: string;\n\n    constructor(requestId: string, audioSourceId: string, audioNodeId: string) {\n        super(\"RecognitionTriggeredEvent\", requestId);\n\n        this.audioSourceId = audioSourceId;\n        this.audioNodeId = audioNodeId;\n    }\n\n    public get AudioSourceId(): string {\n        return this.audioSourceId;\n    }\n\n    public get AudioNodeId(): string {\n        return this.audioNodeId;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class ListeningStartedEvent extends SpeechRecognitionEvent {\n    private audioSourceId: string;\n    private audioNodeId: string;\n\n    constructor(requestId: string, audioSourceId: string, audioNodeId: string) {\n        super(\"ListeningStartedEvent\", requestId);\n        this.audioSourceId = audioSourceId;\n        this.audioNodeId = audioNodeId;\n    }\n\n    public get AudioSourceId(): string {\n        return this.audioSourceId;\n    }\n\n    public get AudioNodeId(): string {\n        return this.audioNodeId;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class ConnectingToServiceEvent extends SpeechRecognitionEvent {\n    private authFetchEventid: string;\n    private connectionId: string;\n\n    constructor(requestId: string, authFetchEventid: string, connectionId: string) {\n        super(\"ConnectingToServiceEvent\", requestId);\n        this.authFetchEventid = authFetchEventid;\n        this.connectionId = connectionId;\n    }\n\n    public get AuthFetchEventid(): string {\n        return this.authFetchEventid;\n    }\n\n    public get ConnectionId(): string {\n        return this.connectionId;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class RecognitionStartedEvent extends SpeechRecognitionEvent {\n    private audioSourceId: string;\n    private audioNodeId: string;\n    private authFetchEventId: string;\n    private connectionId: string;\n\n    constructor(requestId: string, audioSourceId: string, audioNodeId: string, authFetchEventId: string, connectionId: string) {\n        super(\"RecognitionStartedEvent\", requestId);\n\n        this.audioSourceId = audioSourceId;\n        this.audioNodeId = audioNodeId;\n        this.authFetchEventId = authFetchEventId;\n        this.connectionId = connectionId;\n    }\n\n    public get AudioSourceId(): string {\n        return this.audioSourceId;\n    }\n\n    public get AudioNodeId(): string {\n        return this.audioNodeId;\n    }\n\n    public get AuthFetchEventId(): string {\n        return this.authFetchEventId;\n    }\n\n    public get ConnectionId(): string {\n        return this.connectionId;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class SpeechStartDetectedEvent extends SpeechRecognitionResultEvent<ISpeechStartDetectedResult> {\n    constructor(requestId: string, result: ISpeechStartDetectedResult) {\n        super(\"SpeechStartDetectedEvent\", requestId, result);\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class SpeechHypothesisEvent extends SpeechRecognitionResultEvent<ISpeechFragment> {\n    constructor(requestId: string, result: ISpeechFragment) {\n        super(\"SpeechHypothesisEvent\", requestId, result);\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class SpeechFragmentEvent extends SpeechRecognitionResultEvent<ISpeechFragment> {\n    constructor(requestId: string, result: ISpeechFragment) {\n        super(\"SpeechFragmentEvent\", requestId, result);\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class SpeechEndDetectedEvent extends SpeechRecognitionResultEvent<ISpeechEndDetectedResult> {\n    constructor(requestId: string, result: ISpeechEndDetectedResult) {\n        super(\"SpeechEndDetectedEvent\", requestId, result);\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class SpeechSimplePhraseEvent extends SpeechRecognitionResultEvent<ISimpleSpeechPhrase> {\n    constructor(requestId: string, result: ISimpleSpeechPhrase) {\n        super(\"SpeechSimplePhraseEvent\", requestId, result);\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class SpeechDetailedPhraseEvent extends SpeechRecognitionResultEvent<IDetailedSpeechPhrase> {\n    constructor(requestId: string, result: IDetailedSpeechPhrase) {\n        super(\"SpeechDetailedPhraseEvent\", requestId, result);\n    }\n}\n\nexport enum RecognitionCompletionStatus {\n    Success,\n    AudioSourceError,\n    AudioSourceTimeout,\n    AuthTokenFetchError,\n    AuthTokenFetchTimeout,\n    UnAuthorized,\n    ConnectTimeout,\n    ConnectError,\n    ClientRecognitionActivityTimeout,\n    UnknownError,\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class RecognitionEndedEvent extends SpeechRecognitionEvent {\n    private audioSourceId: string;\n    private audioNodeId: string;\n    private authFetchEventId: string;\n    private connectionId: string;\n    private serviceTag: string;\n    private status: RecognitionCompletionStatus;\n    private error: string;\n\n    constructor(\n        requestId: string,\n        audioSourceId: string,\n        audioNodeId: string,\n        authFetchEventId: string,\n        connectionId: string,\n        serviceTag: string,\n        status: RecognitionCompletionStatus,\n        error: string) {\n\n        super(\"RecognitionEndedEvent\", requestId, status === RecognitionCompletionStatus.Success ? EventType.Info : EventType.Error);\n\n        this.audioSourceId = audioSourceId;\n        this.audioNodeId = audioNodeId;\n        this.connectionId = connectionId;\n        this.authFetchEventId = authFetchEventId;\n        this.status = status;\n        this.error = error;\n        this.serviceTag = serviceTag;\n    }\n\n    public get AudioSourceId(): string {\n        return this.audioSourceId;\n    }\n\n    public get AudioNodeId(): string {\n        return this.audioNodeId;\n    }\n\n    public get AuthFetchEventId(): string {\n        return this.authFetchEventId;\n    }\n\n    public get ConnectionId(): string {\n        return this.connectionId;\n    }\n\n    public get ServiceTag(): string {\n        return this.serviceTag;\n    }\n\n    public get Status(): RecognitionCompletionStatus {\n        return this.status;\n    }\n\n    public get Error(): string {\n        return this.error;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/sdk/speech/RecognitionEvents.ts","import {\n    ArgumentNullError,\n    ConnectionClosedEvent,\n    ConnectionEstablishedEvent,\n    ConnectionEstablishErrorEvent,\n    ConnectionEvent,\n    ConnectionMessage,\n    ConnectionMessageReceivedEvent,\n    ConnectionMessageSentEvent,\n    ConnectionOpenResponse,\n    ConnectionStartEvent,\n    ConnectionState,\n    Deferred,\n    Events,\n    EventSource,\n    IWebsocketMessageFormatter,\n    MessageType,\n    PlatformEvent,\n    Promise,\n    PromiseHelper,\n    Queue,\n    RawWebsocketMessage,\n} from \"../common/Exports\";\n\ninterface ISendItem {\n    Message: ConnectionMessage;\n    RawWebsocketMessage: RawWebsocketMessage;\n    SendStatusDeferral: Deferred<boolean>;\n}\n\nexport class WebsocketMessageAdapter {\n\n    private connectionState: ConnectionState;\n    private messageFormatter: IWebsocketMessageFormatter;\n    private websocketClient: WebSocket;\n\n    private sendMessageQueue: Queue<ISendItem>;\n    private receivingMessageQueue: Queue<ConnectionMessage>;\n    private connectionEstablishDeferral: Deferred<ConnectionOpenResponse>;\n    private disconnectDeferral: Deferred<boolean>;\n    private connectionEvents: EventSource<ConnectionEvent>;\n    private connectionId: string;\n    private uri: string;\n\n    public constructor(\n        uri: string,\n        connectionId: string,\n        messageFormatter: IWebsocketMessageFormatter) {\n\n        if (!uri) {\n            throw new ArgumentNullError(\"uri\");\n        }\n\n        if (!messageFormatter) {\n            throw new ArgumentNullError(\"messageFormatter\");\n        }\n\n        this.connectionEvents = new EventSource<ConnectionEvent>();\n        this.connectionId = connectionId;\n        this.messageFormatter = messageFormatter;\n        this.connectionState = ConnectionState.None;\n        this.uri = uri;\n    }\n\n    public get State(): ConnectionState {\n        return this.connectionState;\n    }\n\n    public Open = (): Promise<ConnectionOpenResponse> => {\n        if (this.connectionState === ConnectionState.Disconnected) {\n            return PromiseHelper.FromError<ConnectionOpenResponse>(`Cannot open a connection that is in ${this.connectionState} state`);\n        }\n\n        if (this.connectionEstablishDeferral) {\n            return this.connectionEstablishDeferral.Promise();\n        }\n\n        this.connectionEstablishDeferral = new Deferred<ConnectionOpenResponse>();\n        this.connectionState = ConnectionState.Connecting;\n\n        this.websocketClient = new WebSocket(this.uri);\n        this.websocketClient.binaryType = \"arraybuffer\";\n        this.receivingMessageQueue = new Queue<ConnectionMessage>();\n        this.disconnectDeferral = new Deferred<boolean>();\n        this.sendMessageQueue = new Queue<ISendItem>();\n        this.ProcessSendQueue();\n\n        this.OnEvent(new ConnectionStartEvent(this.connectionId, this.uri));\n\n        this.websocketClient.onopen = (e: Event) => {\n            this.connectionState = ConnectionState.Connected;\n            this.OnEvent(new ConnectionEstablishedEvent(this.connectionId));\n            this.connectionEstablishDeferral.Resolve(new ConnectionOpenResponse(200, \"\"));\n        };\n\n        this.websocketClient.onerror = (e: Event) => {\n            // TODO: Understand what this is error is. Will we still get onClose ?\n            if (this.connectionState !== ConnectionState.Connecting) {\n                // TODO: Is this required ?\n                // this.OnEvent(new ConnectionErrorEvent(errorMsg, connectionId));\n            }\n        };\n\n        this.websocketClient.onclose = (e: CloseEvent) => {\n            if (this.connectionState === ConnectionState.Connecting) {\n                this.connectionState = ConnectionState.Disconnected;\n                this.OnEvent(new ConnectionEstablishErrorEvent(this.connectionId, e.code, e.reason));\n                this.connectionEstablishDeferral.Resolve(new ConnectionOpenResponse(e.code, e.reason));\n            } else {\n                this.OnEvent(new ConnectionClosedEvent(this.connectionId, e.code, e.reason));\n            }\n\n            this.OnClose(e.code, e.reason);\n        };\n\n        this.websocketClient.onmessage = (e: MessageEvent) => {\n            const networkReceivedTime = new Date().toISOString();\n            if (this.connectionState === ConnectionState.Connected) {\n                const deferred = new Deferred<ConnectionMessage>();\n                // let id = ++this.idCounter;\n                this.receivingMessageQueue.EnqueueFromPromise(deferred.Promise());\n                if (e.data instanceof ArrayBuffer) {\n                    const rawMessage = new RawWebsocketMessage(MessageType.Binary, e.data);\n                    this.messageFormatter\n                        .ToConnectionMessage(rawMessage)\n                        .On((connectionMessage: ConnectionMessage) => {\n                            this.OnEvent(new ConnectionMessageReceivedEvent(this.connectionId, networkReceivedTime, connectionMessage));\n                            deferred.Resolve(connectionMessage);\n                        }, (error: string) => {\n                            // TODO: Events for these ?\n                            deferred.Reject(`Invalid binary message format. Error: ${error}`);\n                        });\n                } else {\n                    const rawMessage = new RawWebsocketMessage(MessageType.Text, e.data);\n                    this.messageFormatter\n                        .ToConnectionMessage(rawMessage)\n                        .On((connectionMessage: ConnectionMessage) => {\n                            this.OnEvent(new ConnectionMessageReceivedEvent(this.connectionId, networkReceivedTime, connectionMessage));\n                            deferred.Resolve(connectionMessage);\n                        }, (error: string) => {\n                            // TODO: Events for these ?\n                            deferred.Reject(`Invalid text message format. Error: ${error}`);\n                        });\n                }\n            }\n        };\n\n        return this.connectionEstablishDeferral.Promise();\n    }\n\n    public Send = (message: ConnectionMessage): Promise<boolean> => {\n        if (this.connectionState !== ConnectionState.Connected) {\n            return PromiseHelper.FromError<boolean>(`Cannot send on connection that is in ${this.connectionState} state`);\n        }\n\n        const messageSendStatusDeferral = new Deferred<boolean>();\n        const messageSendDeferral = new Deferred<ISendItem>();\n\n        this.sendMessageQueue.EnqueueFromPromise(messageSendDeferral.Promise());\n\n        this.messageFormatter\n            .FromConnectionMessage(message)\n            .On((rawMessage: RawWebsocketMessage) => {\n                messageSendDeferral.Resolve({\n                    Message: message,\n                    RawWebsocketMessage: rawMessage,\n                    SendStatusDeferral: messageSendStatusDeferral,\n                });\n            }, (error: string) => {\n                messageSendDeferral.Reject(`Error formatting the message. ${error}`);\n            });\n\n        return messageSendStatusDeferral.Promise();\n    }\n\n    public Read = (): Promise<ConnectionMessage> => {\n        if (this.connectionState !== ConnectionState.Connected) {\n            return PromiseHelper.FromError<ConnectionMessage>(`Cannot read on connection that is in ${this.connectionState} state`);\n        }\n\n        return this.receivingMessageQueue.Dequeue();\n    }\n\n    public Close = (reason?: string): Promise<boolean> => {\n        if (this.websocketClient) {\n            if (this.connectionState !== ConnectionState.Connected) {\n                this.websocketClient.close(1000, reason ? reason : \"Normal closure by client\");\n            }\n        } else {\n            const deferral = new Deferred<boolean>();\n            deferral.Resolve(true);\n            return deferral.Promise();\n        }\n\n        return this.disconnectDeferral.Promise();\n    }\n\n    public get Events(): EventSource<ConnectionEvent> {\n        return this.connectionEvents;\n    }\n\n    private SendRawMessage = (sendItem: ISendItem): Promise<boolean> => {\n        try {\n            this.OnEvent(new ConnectionMessageSentEvent(this.connectionId, new Date().toISOString(), sendItem.Message));\n            this.websocketClient.send(sendItem.RawWebsocketMessage.Payload);\n            return PromiseHelper.FromResult(true);\n        } catch (e) {\n            return PromiseHelper.FromError<boolean>(`websocket send error: ${e}`);\n        }\n    }\n\n    private OnClose = (code: number, reason: string): void => {\n        const closeReason = `Connection closed. ${code}: ${reason}`;\n        this.connectionState = ConnectionState.Disconnected;\n        this.disconnectDeferral.Resolve(true);\n        this.receivingMessageQueue.Dispose(reason);\n        this.receivingMessageQueue.DrainAndDispose((pendingReceiveItem: ConnectionMessage) => {\n            // TODO: Events for these ?\n            // Logger.Instance.OnEvent(new LoggingEvent(LogType.Warning, null, `Failed to process received message. Reason: ${closeReason}, Message: ${JSON.stringify(pendingReceiveItem)}`));\n        }, closeReason);\n\n        this.sendMessageQueue.DrainAndDispose((pendingSendItem: ISendItem) => {\n            pendingSendItem.SendStatusDeferral.Reject(closeReason);\n        }, closeReason);\n    }\n\n    private ProcessSendQueue = (): void => {\n        this.sendMessageQueue\n            .Dequeue()\n            .On((sendItem: ISendItem) => {\n                this.SendRawMessage(sendItem)\n                    .On((result: boolean) => {\n                        sendItem.SendStatusDeferral.Resolve(result);\n                        this.ProcessSendQueue();\n                    }, (sendError: string) => {\n                        sendItem.SendStatusDeferral.Reject(sendError);\n                        this.ProcessSendQueue();\n                    });\n            }, (error: string) => {\n                // do nothing\n            });\n    }\n\n    private OnEvent = (event: ConnectionEvent): void => {\n        this.connectionEvents.OnEvent(event);\n        Events.Instance.OnEvent(event);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/common.browser/WebsocketMessageAdapter.ts","import { InvalidOperationError } from \"./Error\";\nimport { CreateNoDashGuid } from \"./Guid\";\nimport { IStringDictionary } from \"./IDictionary\";\n\nexport enum MessageType {\n    Text,\n    Binary,\n}\n\nexport class ConnectionMessage {\n\n    private messageType: MessageType;\n    private headers: IStringDictionary<string>;\n    private body: any = null;\n\n    private id: string;\n\n    public constructor(\n        messageType: MessageType,\n        body: any,\n        headers?: IStringDictionary<string>,\n        id?: string) {\n\n        if (messageType === MessageType.Text && body && !(typeof (body) === \"string\")) {\n            throw new InvalidOperationError(\"Payload must be a string\");\n        }\n\n        if (messageType === MessageType.Binary && body && !(body instanceof ArrayBuffer)) {\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\n        }\n\n        this.messageType = messageType;\n        this.body = body;\n        this.headers = headers ? headers : {};\n        this.id = id ? id : CreateNoDashGuid();\n    }\n\n    public get MessageType(): MessageType {\n        return this.messageType;\n    }\n\n    public get Headers(): any {\n        return this.headers;\n    }\n\n    public get Body(): any {\n        return this.body;\n    }\n\n    public get TextBody(): string {\n        if (this.messageType === MessageType.Binary) {\n            throw new InvalidOperationError(\"Not supported for binary message\");\n        }\n\n        return this.body as string;\n    }\n\n    public get BinaryBody(): ArrayBuffer {\n        if (this.messageType === MessageType.Text) {\n            throw new InvalidOperationError(\"Not supported for text message\");\n        }\n\n        return this.body;\n    }\n\n    public get Id(): string {\n        return this.id;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/common/ConnectionMessage.ts","import { ObjectDisposedError } from \"./Error\";\nimport { CreateNoDashGuid } from \"./Guid\";\nimport { IDetachable } from \"./IDetachable\";\nimport { IStringDictionary } from \"./IDictionary\";\nimport { IEventListener, IEventSource } from \"./IEventSource\";\nimport { PlatformEvent } from \"./PlatformEvent\";\n\nexport class EventSource<TEvent extends PlatformEvent> implements IEventSource<TEvent> {\n    private eventListeners: IStringDictionary<(event: TEvent) => void> = {};\n    private metadata: IStringDictionary<string>;\n    private isDisposed: boolean = false;\n\n    constructor(metadata?: IStringDictionary<string>) {\n        this.metadata = metadata;\n    }\n\n    public OnEvent = (event: TEvent): void => {\n        if (this.IsDisposed()) {\n            throw (new ObjectDisposedError(\"EventSource\"));\n        }\n\n        if (this.Metadata) {\n            for (const paramName in this.Metadata) {\n                if (paramName) {\n                    if (event.Metadata) {\n                        if (!event.Metadata[paramName]) {\n                            event.Metadata[paramName] = this.Metadata[paramName];\n                        }\n                    }\n                }\n            }\n        }\n\n        for (const eventId in this.eventListeners) {\n            if (eventId && this.eventListeners[eventId]) {\n                this.eventListeners[eventId](event);\n            }\n        }\n    }\n\n    public Attach = (onEventCallback: (event: TEvent) => void): IDetachable => {\n        const id = CreateNoDashGuid();\n        this.eventListeners[id] = onEventCallback;\n        return {\n            Detach: () => {\n                delete this.eventListeners[id];\n            },\n        };\n    }\n\n    public AttachListener = (listener: IEventListener<TEvent>): IDetachable => {\n        return this.Attach(listener.OnEvent);\n    }\n\n    public IsDisposed = (): boolean => {\n        return this.isDisposed;\n    }\n\n    public Dispose = (): void => {\n        this.eventListeners = null;\n        this.isDisposed = true;\n    }\n\n    public get Metadata(): IStringDictionary<string> {\n        return this.metadata;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/common/EventSource.ts","import { ArgumentNullError } from \"./Error\";\nimport { IStringDictionary } from \"./IDictionary\";\nimport { IKeyValueStorage } from \"./IKeyValueStorage\";\n\nexport class InMemoryStorage implements IKeyValueStorage {\n\n    private store: IStringDictionary<string> = {};\n\n    public Get = (key: string): string => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        return this.store[key];\n    }\n\n    public GetOrAdd = (key: string, valueToAdd: string): string => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        if (this.store[key] === undefined) {\n            this.store[key] = valueToAdd;\n        }\n\n        return this.store[key];\n    }\n\n    public Set = (key: string, value: string): void => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        this.store[key] = value;\n    }\n\n    public Remove = (key: string): void => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        if (this.store[key] !== undefined) {\n            delete this.store[key];\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/common/InMemoryStorage.ts","import { ObjectDisposedError } from \"./Error\";\nimport { IDetachable } from \"./IDetachable\";\nimport { IStringDictionary } from \"./IDictionary\";\nimport { IDisposable } from \"./IDisposable\";\n\nexport interface IList<TItem> extends IDisposable {\n    Get(itemIndex: number): TItem;\n    First(): TItem;\n    Last(): TItem;\n\n    Add(item: TItem): void;\n    InsertAt(index: number, item: TItem): void;\n\n    RemoveFirst(): TItem;\n    RemoveLast(): TItem;\n    RemoveAt(index: number): TItem;\n    Remove(index: number, count: number): TItem[];\n    Clear(): void;\n\n    Length(): number;\n\n    OnAdded(addedCallback: () => void): IDetachable;\n    OnRemoved(removedCallback: () => void): IDetachable;\n    OnDisposed(disposedCallback: () => void): IDetachable;\n\n    Join(seperator?: string): string;\n\n    ToArray(): TItem[];\n\n    Any(callback?: (item: TItem, index: number) => boolean): boolean;\n    All(callback: (item: TItem) => boolean): boolean;\n    ForEach(callback: (item: TItem, index: number) => void): void;\n    Select<T2>(callback: (item: TItem, index: number) => T2): List<T2>;\n    Where(callback: (item: TItem, index: number) => boolean): List<TItem>;\n    OrderBy(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\n    OrderByDesc(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\n    Clone(): List<TItem>;\n    Concat(list: List<TItem>): List<TItem>;\n    ConcatArray(array: TItem[]): List<TItem>;\n}\n\nexport class List<TItem> implements IList<TItem>  {\n    private list: TItem[];\n    private subscriptionIdCounter: number = 0;\n    private addSubscriptions: IStringDictionary<() => void> = {};\n    private removeSubscriptions: IStringDictionary<() => void> = {};\n    private disposedSubscriptions: IStringDictionary<() => void> = {};\n    private disposeReason: string = null;\n\n    public constructor(list?: TItem[]) {\n        this.list = [];\n        // copy the list rather than taking as is.\n        if (list) {\n            for (const item of list) {\n                this.list.push(item);\n            }\n        }\n    }\n\n    public Get = (itemIndex: number): TItem => {\n        this.ThrowIfDisposed();\n        return this.list[itemIndex];\n    }\n\n    public First = (): TItem => {\n        return this.Get(0);\n    }\n\n    public Last = (): TItem => {\n        return this.Get(this.Length() - 1);\n    }\n\n    public Add = (item: TItem): void => {\n        this.ThrowIfDisposed();\n        this.InsertAt(this.list.length, item);\n    }\n\n    public InsertAt = (index: number, item: TItem): void => {\n        this.ThrowIfDisposed();\n        if (index === 0) {\n            this.list.unshift(item);\n        } else if (index === this.list.length) {\n            this.list.push(item);\n        } else {\n            this.list.splice(index, 0, item);\n        }\n        this.TriggerSubscriptions(this.addSubscriptions);\n    }\n\n    public RemoveFirst = (): TItem => {\n        this.ThrowIfDisposed();\n        return this.RemoveAt(0);\n    }\n\n    public RemoveLast = (): TItem => {\n        this.ThrowIfDisposed();\n        return this.RemoveAt(this.Length() - 1);\n    }\n\n    public RemoveAt = (index: number): TItem => {\n        this.ThrowIfDisposed();\n        return this.Remove(index, 1)[0];\n    }\n\n    public Remove = (index: number, count: number): TItem[] => {\n        this.ThrowIfDisposed();\n        const removedElements = this.list.splice(index, count);\n        this.TriggerSubscriptions(this.removeSubscriptions);\n        return removedElements;\n    }\n\n    public Clear = (): void => {\n        this.ThrowIfDisposed();\n        this.Remove(0, this.Length());\n    }\n\n    public Length = (): number => {\n        this.ThrowIfDisposed();\n        return this.list.length;\n    }\n\n    public OnAdded = (addedCallback: () => void): IDetachable => {\n        this.ThrowIfDisposed();\n        const subscriptionId = this.subscriptionIdCounter++;\n\n        this.addSubscriptions[subscriptionId] = addedCallback;\n\n        return {\n            Detach: () => {\n                delete this.addSubscriptions[subscriptionId];\n            },\n        };\n    }\n\n    public OnRemoved = (removedCallback: () => void): IDetachable => {\n        this.ThrowIfDisposed();\n        const subscriptionId = this.subscriptionIdCounter++;\n\n        this.removeSubscriptions[subscriptionId] = removedCallback;\n\n        return {\n            Detach: () => {\n                delete this.removeSubscriptions[subscriptionId];\n            },\n        };\n    }\n\n    public OnDisposed = (disposedCallback: () => void): IDetachable => {\n        this.ThrowIfDisposed();\n        const subscriptionId = this.subscriptionIdCounter++;\n\n        this.disposedSubscriptions[subscriptionId] = disposedCallback;\n\n        return {\n            Detach: () => {\n                delete this.disposedSubscriptions[subscriptionId];\n            },\n        };\n    }\n\n    public Join = (seperator?: string): string => {\n        this.ThrowIfDisposed();\n        return this.list.join(seperator);\n    }\n\n    public ToArray = (): TItem[] => {\n        const cloneCopy = Array<TItem>();\n        this.list.forEach((val: TItem) => {\n            cloneCopy.push(val);\n        });\n        return cloneCopy;\n    }\n\n    public Any = (callback?: (item: TItem, index: number) => boolean): boolean => {\n        this.ThrowIfDisposed();\n        if (callback) {\n            return this.Where(callback).Length() > 0;\n        } else {\n            return this.Length() > 0;\n        }\n    }\n\n    public All = (callback: (item: TItem) => boolean): boolean => {\n        this.ThrowIfDisposed();\n        return this.Where(callback).Length() === this.Length();\n    }\n\n    public ForEach = (callback: (item: TItem, index: number) => void): void => {\n        this.ThrowIfDisposed();\n        for (let i = 0; i < this.Length(); i++) {\n            callback(this.list[i], i);\n        }\n    }\n\n    public Select = <T2>(callback: (item: TItem, index: number) => T2): List<T2> => {\n        this.ThrowIfDisposed();\n        const selectList: T2[] = [];\n        for (let i = 0; i < this.list.length; i++) {\n            selectList.push(callback(this.list[i], i));\n        }\n\n        return new List<T2>(selectList);\n    }\n\n    public Where = (callback: (item: TItem, index: number) => boolean): List<TItem> => {\n        this.ThrowIfDisposed();\n        const filteredList = new List<TItem>();\n        for (let i = 0; i < this.list.length; i++) {\n            if (callback(this.list[i], i)) {\n                filteredList.Add(this.list[i]);\n            }\n        }\n        return filteredList;\n    }\n\n    public OrderBy = (compareFn: (a: TItem, b: TItem) => number): List<TItem> => {\n        this.ThrowIfDisposed();\n        const clonedArray = this.ToArray();\n        const orderedArray = clonedArray.sort(compareFn);\n        return new List(orderedArray);\n    }\n\n    public OrderByDesc = (compareFn: (a: TItem, b: TItem) => number): List<TItem> => {\n        this.ThrowIfDisposed();\n        return this.OrderBy((a: TItem, b: TItem) => compareFn(b, a));\n    }\n\n    public Clone = (): List<TItem> => {\n        this.ThrowIfDisposed();\n        return new List<TItem>(this.ToArray());\n    }\n\n    public Concat = (list: List<TItem>): List<TItem> => {\n        this.ThrowIfDisposed();\n        return new List<TItem>(this.list.concat(list.ToArray()));\n    }\n\n    public ConcatArray = (array: TItem[]): List<TItem> => {\n        this.ThrowIfDisposed();\n        return new List<TItem>(this.list.concat(array));\n    }\n\n    public IsDisposed = (): boolean => {\n        return this.list == null;\n    }\n\n    public Dispose = (reason?: string): void => {\n        if (!this.IsDisposed()) {\n            this.disposeReason = reason;\n            this.list = null;\n            this.addSubscriptions = null;\n            this.removeSubscriptions = null;\n            this.TriggerSubscriptions(this.disposedSubscriptions);\n        }\n    }\n\n    private ThrowIfDisposed = (): void => {\n        if (this.IsDisposed()) {\n            throw new ObjectDisposedError(\"List\", this.disposeReason);\n        }\n    }\n\n    private TriggerSubscriptions = (subscriptions: IStringDictionary<() => void>): void => {\n        if (subscriptions) {\n            for (const subscriptionId in subscriptions) {\n                if (subscriptionId) {\n                    subscriptions[subscriptionId]();\n                }\n            }\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/common/List.ts","import { ArgumentNullError  } from \"./Error\";\n\nexport enum PromiseState {\n    None,\n    Resolved,\n    Rejected,\n}\n\nexport interface IPromise<T> {\n    Result(): PromiseResult<T>;\n\n    ContinueWith<TContinuationResult>(\n        continuationCallback: (promiseResult: PromiseResult<T>) => TContinuationResult): IPromise<TContinuationResult>;\n\n    ContinueWithPromise<TContinuationResult>(\n        continuationCallback: (promiseResult: PromiseResult<T>) => IPromise<TContinuationResult>): IPromise<TContinuationResult>;\n\n    OnSuccessContinueWith<TContinuationResult>(\n        continuationCallback: (result: T) => TContinuationResult): IPromise<TContinuationResult>;\n\n    OnSuccessContinueWithPromise<TContinuationResult>(\n        continuationCallback: (result: T) => IPromise<TContinuationResult>): IPromise<TContinuationResult>;\n\n    On(successCallback: (result: T) => void, errorCallback: (error: string) => void): IPromise<T>;\n\n    Finally(callback: () => void): IPromise<T>;\n}\n\nexport interface IDeferred<T> {\n    State(): PromiseState;\n\n    Promise(): IPromise<T>;\n\n    Resolve(result: T): IDeferred<T>;\n\n    Reject(error: string): IDeferred<T>;\n}\n\nexport class PromiseResult<T> {\n    protected isCompleted: boolean;\n    protected isError: boolean;\n    protected error: string;\n    protected result: T;\n\n    public constructor(promiseResultEventSource: PromiseResultEventSource<T>) {\n        promiseResultEventSource.On((result: T) => {\n            if (!this.isCompleted) {\n                this.isCompleted = true;\n                this.isError = false;\n                this.result = result;\n            }\n        }, (error: string) => {\n            if (!this.isCompleted) {\n                this.isCompleted = true;\n                this.isError = true;\n                this.error = error;\n            }\n        });\n    }\n\n    public get IsCompleted(): boolean {\n        return this.isCompleted;\n    }\n\n    public get IsError(): boolean {\n        return this.isError;\n    }\n\n    public get Error(): string {\n        return this.error;\n    }\n\n    public get Result(): T {\n        return this.result;\n    }\n\n    public ThrowIfError = (): void => {\n        if (this.IsError) {\n            throw this.Error;\n        }\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class PromiseResultEventSource<T>  {\n\n    private onSetResult: (result: T) => void;\n    private onSetError: (error: string) => void;\n\n    public SetResult = (result: T): void => {\n        this.onSetResult(result);\n    }\n\n    public SetError = (error: string): void => {\n        this.onSetError(error);\n    }\n\n    public On = (onSetResult: (result: T) => void, onSetError: (error: string) => void): void => {\n        this.onSetResult = onSetResult;\n        this.onSetError = onSetError;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class PromiseHelper {\n    public static WhenAll = (promises: Array<Promise<any>>): Promise<boolean> => {\n        if (!promises || promises.length === 0) {\n            throw new ArgumentNullError(\"promises\");\n        }\n\n        const deferred = new Deferred<boolean>();\n        const errors: string[] = [];\n        let completedPromises: number = 0;\n\n        const checkForCompletion = () => {\n            completedPromises++;\n            if (completedPromises === promises.length) {\n                if (errors.length === 0) {\n                    deferred.Resolve(true);\n                } else {\n                    deferred.Reject(errors.join(\", \"));\n                }\n            }\n        };\n\n        for (const promise of promises) {\n            promise.On((r: any) => {\n                checkForCompletion();\n            }, (e: string) => {\n                errors.push(e);\n                checkForCompletion();\n            });\n        }\n\n        return deferred.Promise();\n    }\n\n    public static FromResult = <TResult>(result: TResult): Promise<TResult> => {\n        const deferred = new Deferred<TResult>();\n        deferred.Resolve(result);\n        return deferred.Promise();\n    }\n\n    public static FromError = <TResult>(error: string): Promise<TResult> => {\n        const deferred = new Deferred<TResult>();\n        deferred.Reject(error);\n        return deferred.Promise();\n    }\n}\n\n// TODO: replace with ES6 promises\n// tslint:disable-next-line:max-classes-per-file\nexport class Promise<T> implements IPromise<T> {\n\n    private sink: Sink<T>;\n\n    public constructor(sink: Sink<T>) {\n        this.sink = sink;\n    }\n\n    public Result = (): PromiseResult<T> => {\n        return this.sink.Result;\n    }\n\n    public ContinueWith = <TContinuationResult>(\n        continuationCallback: (promiseResult: PromiseResult<T>) => TContinuationResult): Promise<TContinuationResult> => {\n\n        if (!continuationCallback) {\n            throw new ArgumentNullError(\"continuationCallback\");\n        }\n\n        const continuationDeferral = new Deferred<TContinuationResult>();\n\n        this.sink.on(\n            (r: T) => {\n                try {\n                    const continuationResult: TContinuationResult = continuationCallback(this.sink.Result);\n                    continuationDeferral.Resolve(continuationResult);\n                } catch (e) {\n                    continuationDeferral.Reject(`'Unhandled callback error: ${e}'`);\n                }\n            },\n            (error: string) => {\n                try {\n                    const continuationResult: TContinuationResult = continuationCallback(this.sink.Result);\n                    continuationDeferral.Resolve(continuationResult);\n                } catch (e) {\n                    continuationDeferral.Reject(`'Unhandled callback error: ${e}. InnerError: ${error}'`);\n                }\n            },\n        );\n\n        return continuationDeferral.Promise();\n    }\n\n    public OnSuccessContinueWith = <TContinuationResult>(\n        continuationCallback: (result: T) => TContinuationResult): Promise<TContinuationResult> => {\n\n        if (!continuationCallback) {\n            throw new ArgumentNullError(\"continuationCallback\");\n        }\n\n        const continuationDeferral = new Deferred<TContinuationResult>();\n\n        this.sink.on(\n            (r: T) => {\n                try {\n                    const continuationResult: TContinuationResult = continuationCallback(r);\n                    continuationDeferral.Resolve(continuationResult);\n                } catch (e) {\n                    continuationDeferral.Reject(`'Unhandled callback error: ${e}'`);\n                }\n            },\n            (error: string) => {\n                continuationDeferral.Reject(`'Unhandled callback error: ${error}'`);\n            },\n        );\n\n        return continuationDeferral.Promise();\n    }\n\n    public ContinueWithPromise = <TContinuationResult>(\n        continuationCallback: (promiseResult: PromiseResult<T>) => Promise<TContinuationResult>): Promise<TContinuationResult> => {\n\n        if (!continuationCallback) {\n            throw new ArgumentNullError(\"continuationCallback\");\n        }\n\n        const continuationDeferral = new Deferred<TContinuationResult>();\n\n        this.sink.on(\n            (r: T) => {\n                try {\n                    const continuationPromise: Promise<TContinuationResult> = continuationCallback(this.sink.Result);\n                    if (!continuationPromise) {\n                        throw new Error(\"'Continuation callback did not return promise'\");\n                    }\n                    continuationPromise.On((continuationResult: TContinuationResult) => {\n                        continuationDeferral.Resolve(continuationResult);\n                    }, (e: string) => {\n                        continuationDeferral.Reject(e);\n                    });\n                } catch (e) {\n                    continuationDeferral.Reject(`'Unhandled callback error: ${e}'`);\n                }\n            },\n            (error: string) => {\n                try {\n                    const continuationPromise: Promise<TContinuationResult> = continuationCallback(this.sink.Result);\n                    if (!continuationPromise) {\n                        throw new Error(\"Continuation callback did not return promise\");\n                    }\n                    continuationPromise.On((continuationResult: TContinuationResult) => {\n                        continuationDeferral.Resolve(continuationResult);\n                    }, (e: string) => {\n                        continuationDeferral.Reject(e);\n                    });\n                } catch (e) {\n                    continuationDeferral.Reject(`'Unhandled callback error: ${e}. InnerError: ${error}'`);\n                }\n            },\n        );\n\n        return continuationDeferral.Promise();\n    }\n\n    public OnSuccessContinueWithPromise = <TContinuationResult>(\n        continuationCallback: (result: T) => Promise<TContinuationResult>): Promise<TContinuationResult> => {\n\n        if (!continuationCallback) {\n            throw new ArgumentNullError(\"continuationCallback\");\n        }\n\n        const continuationDeferral = new Deferred<TContinuationResult>();\n\n        this.sink.on(\n            (r: T) => {\n                try {\n                    const continuationPromise: Promise<TContinuationResult> = continuationCallback(r);\n                    if (!continuationPromise) {\n                        throw new Error(\"Continuation callback did not return promise\");\n                    }\n                    continuationPromise.On((continuationResult: TContinuationResult) => {\n                        continuationDeferral.Resolve(continuationResult);\n                    }, (e: string) => {\n                        continuationDeferral.Reject(e);\n                    });\n                } catch (e) {\n                    continuationDeferral.Reject(`'Unhandled callback error: ${e}'`);\n                }\n            },\n            (error: string) => {\n                continuationDeferral.Reject(`'Unhandled callback error: ${error}.'`);\n            },\n        );\n\n        return continuationDeferral.Promise();\n    }\n\n    public On = (\n        successCallback: (result: T) => void,\n        errorCallback: (error: string) => void): Promise<T> => {\n        if (!successCallback) {\n            throw new ArgumentNullError(\"successCallback\");\n        }\n\n        if (!errorCallback) {\n            throw new ArgumentNullError(\"errorCallback\");\n        }\n\n        this.sink.on(successCallback, errorCallback);\n        return this;\n    }\n\n    public Finally = (callback: () => void): Promise<T> => {\n        if (!callback) {\n            throw new ArgumentNullError(\"callback\");\n        }\n\n        const callbackWrapper = (_: any) => {\n            callback();\n        };\n\n        return this.On(callbackWrapper, callbackWrapper);\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class Deferred<T> implements IDeferred<T> {\n\n    private promise: Promise<T>;\n    private sink: Sink<T>;\n\n    public constructor() {\n        this.sink = new Sink<T>();\n        this.promise = new Promise<T>(this.sink);\n    }\n\n    public State = (): PromiseState => {\n        return this.sink.State;\n    }\n\n    public Promise = (): Promise<T> => {\n        return this.promise;\n    }\n\n    public Resolve = (result: T): Deferred<T> => {\n        this.sink.Resolve(result);\n        return this;\n    }\n\n    public Reject = (error: string): Deferred<T> => {\n        this.sink.Reject(error);\n        return this;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class Sink<T> {\n\n    private state: PromiseState = PromiseState.None;\n    private promiseResult: PromiseResult<T> = null;\n    private promiseResultEvents: PromiseResultEventSource<T> = null;\n\n    private successHandlers: Array<((result: T) => void)> = [];\n    private errorHandlers: Array<(e: string) => void> = [];\n\n    public constructor() {\n        this.promiseResultEvents = new PromiseResultEventSource();\n        this.promiseResult = new PromiseResult(this.promiseResultEvents);\n    }\n\n    public get State(): PromiseState {\n        return this.state;\n    }\n\n    public get Result(): PromiseResult<T> {\n        return this.promiseResult;\n    }\n\n    public Resolve = (result: T): void => {\n        if (this.state !== PromiseState.None) {\n            throw new Error(\"'Cannot resolve a completed promise'\");\n        }\n\n        this.state = PromiseState.Resolved;\n        this.promiseResultEvents.SetResult(result);\n\n        for (let i = 0; i < this.successHandlers.length; i++) {\n            this.ExecuteSuccessCallback(result, this.successHandlers[i], this.errorHandlers[i]);\n        }\n\n        this.DetachHandlers();\n    }\n\n    public Reject = (error: string): void => {\n        if (this.state !== PromiseState.None) {\n            throw new Error(\"'Cannot reject a completed promise'\");\n        }\n\n        this.state = PromiseState.Rejected;\n        this.promiseResultEvents.SetError(error);\n\n        for (const errorHandler of this.errorHandlers) {\n            this.ExecuteErrorCallback(error, errorHandler);\n        }\n\n        this.DetachHandlers();\n    }\n\n    public on = (\n        successCallback: (result: T) => void,\n        errorCallback: (error: string) => void): void => {\n\n        if (successCallback == null) {\n            successCallback = (r: T) => { return; };\n        }\n\n        if (this.state === PromiseState.None) {\n            this.successHandlers.push(successCallback);\n            this.errorHandlers.push(errorCallback);\n        } else {\n            if (this.state === PromiseState.Resolved) {\n                this.ExecuteSuccessCallback(this.promiseResult.Result, successCallback, errorCallback);\n            } else if (this.state === PromiseState.Rejected) {\n                this.ExecuteErrorCallback(this.promiseResult.Error, errorCallback);\n            }\n\n            this.DetachHandlers();\n        }\n    }\n\n    private ExecuteSuccessCallback = (result: T, successCallback: (result: T) => void, errorCallback: (error: string) => void): void => {\n        try {\n            successCallback(result);\n        } catch (e) {\n            this.ExecuteErrorCallback(`'Unhandled callback error: ${e}'`, errorCallback);\n        }\n    }\n\n    private ExecuteErrorCallback = (error: string, errorCallback: (error: string) => void): void => {\n        if (errorCallback) {\n            try {\n                errorCallback(error);\n            } catch (e) {\n                throw new Error(`'Unhandled callback error: ${e}. InnerError: ${error}'`);\n            }\n        } else {\n            throw new Error(`'Unhandled error: ${error}'`);\n        }\n    }\n\n    private DetachHandlers = (): void => {\n        this.errorHandlers = [];\n        this.successHandlers = [];\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/common/Promise.ts","import { InvalidOperationError, ObjectDisposedError } from \"./Error\";\nimport { IDetachable } from \"./IDetachable\";\nimport { IDisposable } from \"./IDisposable\";\nimport { List } from \"./List\";\nimport { Deferred, Promise, PromiseHelper } from \"./Promise\";\n\nexport interface IQueue<TItem> extends IDisposable {\n    Enqueue(item: TItem): void;\n    EnqueueFromPromise(promise: Promise<TItem>): void;\n    Dequeue(): Promise<TItem>;\n    Peek(): Promise<TItem>;\n    Length(): number;\n}\n\nenum SubscriberType {\n    Dequeue,\n    Peek,\n}\n\nexport class Queue<TItem> implements IQueue<TItem> {\n    private promiseStore: List<Promise<TItem>> = new List<Promise<TItem>>();\n    private list: List<TItem>;\n    private detachables: IDetachable[];\n    private subscribers: List<{ type: SubscriberType, deferral: Deferred<TItem> }>;\n    private isDrainInProgress: boolean = false;\n    private isDisposing: boolean = false;\n    private disposeReason: string = null;\n\n    public constructor(list?: List<TItem>) {\n        this.list = list ? list : new List<TItem>();\n        this.detachables = [];\n        this.subscribers = new List<{ type: SubscriberType, deferral: Deferred<TItem> }>();\n        this.detachables.push(this.list.OnAdded(this.Drain));\n    }\n\n    public Enqueue = (item: TItem): void => {\n        this.ThrowIfDispose();\n        this.EnqueueFromPromise(PromiseHelper.FromResult(item));\n    }\n\n    public EnqueueFromPromise = (promise: Promise<TItem>): void => {\n        this.ThrowIfDispose();\n        this.promiseStore.Add(promise);\n        promise.Finally(() => {\n            while (this.promiseStore.Length() > 0) {\n                if (!this.promiseStore.First().Result().IsCompleted) {\n                    break;\n                } else {\n                    const p = this.promiseStore.RemoveFirst();\n                    if (!p.Result().IsError) {\n                        this.list.Add(p.Result().Result);\n                    } else {\n                        // TODO: Log as warning.\n                    }\n                }\n            }\n        });\n    }\n\n    public Dequeue = (): Promise<TItem> => {\n        this.ThrowIfDispose();\n        const deferredSubscriber = new Deferred<TItem>();\n        this.subscribers.Add({ deferral: deferredSubscriber, type: SubscriberType.Dequeue });\n        this.Drain();\n        return deferredSubscriber.Promise();\n    }\n\n    public Peek = (): Promise<TItem> => {\n        this.ThrowIfDispose();\n        const deferredSubscriber = new Deferred<TItem>();\n        this.subscribers.Add({ deferral: deferredSubscriber, type: SubscriberType.Peek });\n        this.Drain();\n        return deferredSubscriber.Promise();\n    }\n\n    public Length = (): number => {\n        this.ThrowIfDispose();\n        return this.list.Length();\n    }\n\n    public IsDisposed = (): boolean => {\n        return this.subscribers == null;\n    }\n\n    public DrainAndDispose = (pendingItemProcessor: (pendingItemInQueue: TItem) => void, reason?: string): Promise<boolean> => {\n        if (!this.IsDisposed() && !this.isDisposing) {\n            this.disposeReason = reason;\n            this.isDisposing = true;\n            while (this.subscribers.Length() > 0) {\n                const subscriber = this.subscribers.RemoveFirst();\n                // TODO: this needs work (Resolve(null) instead?).\n                subscriber.deferral.Reject(\"Disposed\");\n            }\n\n            for (const detachable of this.detachables) {\n                detachable.Detach();\n            }\n\n            if (this.promiseStore.Length() > 0 && pendingItemProcessor) {\n                return PromiseHelper\n                    .WhenAll(this.promiseStore.ToArray())\n                    .ContinueWith(() => {\n                        this.subscribers = null;\n                        this.list.ForEach((item: TItem, index: number): void => {\n                            pendingItemProcessor(item);\n                        });\n                        this.list = null;\n                        return true;\n                    });\n            } else {\n                this.subscribers = null;\n                this.list = null;\n            }\n        }\n\n        return PromiseHelper.FromResult(true);\n    }\n\n    public Dispose = (reason?: string): void => {\n        this.DrainAndDispose(null, reason);\n    }\n\n    private Drain = (): void => {\n        if (!this.isDrainInProgress && !this.isDisposing) {\n            this.isDrainInProgress = true;\n\n            while (this.list.Length() > 0 && this.subscribers.Length() > 0 && !this.isDisposing) {\n                const subscriber = this.subscribers.RemoveFirst();\n                if (subscriber.type === SubscriberType.Peek) {\n                    subscriber.deferral.Resolve(this.list.First());\n                } else {\n                    const dequeuedItem = this.list.RemoveFirst();\n                    subscriber.deferral.Resolve(dequeuedItem);\n                }\n            }\n\n            this.isDrainInProgress = false;\n        }\n    }\n\n    private ThrowIfDispose = (): void => {\n        if (this.IsDisposed()) {\n            if (this.disposeReason) {\n                throw new InvalidOperationError(this.disposeReason);\n            }\n\n            throw new ObjectDisposedError(\"Queue\");\n        } else if (this.isDisposing) {\n            throw new InvalidOperationError(\"Queue disposing\");\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/common/Queue.ts","import { WebsocketConnection } from \"../../common.browser/Exports\";\nimport {\n    IConnection,\n    IStringDictionary,\n    Promise,\n    Storage,\n} from \"../../common/Exports\";\nimport {\n    AuthInfo,\n    IAuthentication,\n    IConnectionFactory,\n    RecognitionMode,\n    RecognizerConfig,\n    SpeechResultFormat,\n    WebsocketMessageFormatter,\n} from \"../speech/Exports\";\n\nconst TestHooksParamName: string = \"testhooks\";\nconst ConnectionIdHeader: string = \"X-ConnectionId\";\n\nexport class SpeechConnectionFactory implements IConnectionFactory {\n\n    public Create = (\n        config: RecognizerConfig,\n        authInfo: AuthInfo,\n        connectionId?: string): IConnection => {\n\n        let endpoint = \"\";\n        switch (config.RecognitionMode) {\n            case RecognitionMode.Conversation:\n                endpoint = this.Host + this.ConversationRelativeUri;\n                break;\n            case RecognitionMode.Dictation:\n                endpoint = this.Host + this.DictationRelativeUri;\n                break;\n            default:\n                endpoint = this.Host + this.InteractiveRelativeUri; // default is interactive\n                break;\n        }\n\n        const queryParams: IStringDictionary<string> = {\n            format: SpeechResultFormat[config.Format].toString().toLowerCase(),\n            language: config.Language,\n        };\n\n        if (this.IsDebugModeEnabled) {\n            queryParams[TestHooksParamName] = \"1\";\n        }\n\n        const headers: IStringDictionary<string> = {};\n        headers[authInfo.HeaderName] = authInfo.Token;\n        headers[ConnectionIdHeader] = connectionId;\n\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), connectionId);\n    }\n\n    private get Host(): string {\n        return Storage.Local.GetOrAdd(\"Host\", \"wss://speech.platform.bing.com\");\n    }\n\n    private get InteractiveRelativeUri(): string {\n        return Storage.Local.GetOrAdd(\"InteractiveRelativeUri\", \"/speech/recognition/interactive/cognitiveservices/v1\");\n    }\n\n    private get ConversationRelativeUri(): string {\n        return Storage.Local.GetOrAdd(\"ConversationRelativeUri\", \"/speech/recognition/conversation/cognitiveservices/v1\");\n    }\n\n    private get DictationRelativeUri(): string {\n        return Storage.Local.GetOrAdd(\"DictationRelativeUri\", \"/speech/recognition/dictation/cognitiveservices/v1\");\n    }\n\n    private get IsDebugModeEnabled(): boolean {\n        const value = Storage.Local.GetOrAdd(\"IsDebugModeEnabled\", \"false\");\n        return value.toLowerCase() === \"true\";\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/sdk/speech.browser/SpeechConnectionFactory.ts","\nexport enum RecognitionMode {\n    Interactive,\n    Conversation,\n    Dictation,\n}\n\nexport enum SpeechResultFormat {\n    Simple,\n    Detailed,\n}\n\nexport class RecognizerConfig {\n    private recognitionMode: RecognitionMode = RecognitionMode.Interactive;\n    private language: string;\n    private format: SpeechResultFormat;\n    private speechConfig: SpeechConfig;\n    private recognitionActivityTimeout: number;\n\n    constructor(\n        platformConfig: SpeechConfig,\n        recognitionMode: RecognitionMode = RecognitionMode.Interactive,\n        language: string = \"en-us\",\n        format: SpeechResultFormat = SpeechResultFormat.Simple) {\n        this.speechConfig = platformConfig ? platformConfig : new SpeechConfig(new Context(null, null));\n        this.recognitionMode = recognitionMode;\n        this.language = language;\n        this.format = format;\n        this.recognitionActivityTimeout = recognitionMode === RecognitionMode.Interactive ? 8000 : 25000;\n    }\n\n    public get RecognitionMode(): RecognitionMode {\n        return this.recognitionMode;\n    }\n\n    public get Language(): string {\n        return this.language;\n    }\n\n    public get Format(): SpeechResultFormat {\n        return this.format;\n    }\n\n    public get SpeechConfig(): SpeechConfig {\n        return this.speechConfig;\n    }\n\n    public get RecognitionActivityTimeout(): number {\n        return this.recognitionActivityTimeout;\n    }\n\n    public get IsContinuousRecognition(): boolean {\n        return this.recognitionMode !== RecognitionMode.Interactive;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class SpeechConfig {\n    private context: Context;\n\n    constructor(context: Context) {\n        this.context = context;\n    }\n\n    public Serialize = (): string => {\n        return JSON.stringify(this, (key: any, value: any): any => {\n        if (value && typeof value === \"object\") {\n            const replacement: any = {};\n            for (const k in value) {\n                if (Object.hasOwnProperty.call(value, k)) {\n                    replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k];\n                }\n            }\n            return replacement;\n        }\n        return value;\n        });\n    }\n\n    public get Context(): Context {\n        return this.context;\n    }\n\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class Context {\n    private system: System;\n    private os: OS;\n    private device: Device;\n\n    constructor(os: OS, device: Device) {\n        this.system = new System();\n        this.os = os;\n        this.device = device;\n    }\n\n    public get System(): System {\n        return this.system;\n    }\n\n    public get OS(): OS {\n        return this.os;\n    }\n\n    public get Device(): Device {\n        return this.device;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class System {\n    private version: string;\n    constructor() {\n        // TODO: Tie this with the sdk Version somehow\n        this.version = \"1.0.00000\";\n    }\n    public get Version(): string {\n        // Controlled by sdk\n        return this.version;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class OS {\n\n    private platform: string;\n    private name: string;\n    private version: string;\n\n    constructor(platform: string, name: string, version: string) {\n        this.platform = platform;\n        this.name = name;\n        this.version = version;\n    }\n\n    public get Platform(): string {\n        return this.platform;\n    }\n\n    public get Name(): string {\n        return this.name;\n    }\n\n    public get Version(): string {\n        return this.version;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class Device {\n\n    private manufacturer: string;\n    private model: string;\n    private version: string;\n\n    constructor(manufacturer: string, model: string, version: string) {\n        this.manufacturer = manufacturer;\n        this.model = model;\n        this.version = version;\n    }\n\n    public get Manufacturer(): string {\n        return this.manufacturer;\n    }\n\n    public get Model(): string {\n        return this.model;\n    }\n\n    public get Version(): string {\n        return this.version;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/sdk/speech/RecognizerConfig.ts","export const log = (message?: any, ... optionalParams: any[]) => {\n    if (typeof(window) !== 'undefined' && (window as any)[\"botchatDebug\"] && message)\n        console.log(message, ... optionalParams);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Konsole.ts","import { Speech, Func, Action } from '../SpeechModule'\nimport * as konsole from '../Konsole';\nimport * as CognitiveSpeech from 'microsoft-speech-browser-sdk/Speech.Browser.Sdk'\n\nexport interface ICognitiveServicesSpeechRecognizerProperties {\n    locale?: string,\n    subscriptionKey?: string,\n    fetchCallback?: (authFetchEventId: string) => Promise<string>,\n    fetchOnExpiryCallback?: (authFetchEventId: string) => Promise<string>\n}\n\nexport class SpeechRecognizer implements Speech.ISpeechRecognizer {\n    public audioStreamStartInitiated: boolean = false;\n    public isStreamingToService: boolean = false;\n    public onIntermediateResult: Func<string, void> = null;\n    public onFinalResult: Func<string, void> = null;\n    public onAudioStreamingToService: Action = null;\n    public onRecognitionFailed: Action = null;\n    public locale: string = null;\n    public referenceGrammarId: string;\n\n    private actualRecognizer: any = null;\n    private properties: ICognitiveServicesSpeechRecognizerProperties;\n\n    constructor(properties: ICognitiveServicesSpeechRecognizerProperties = {}) {\n        this.properties = properties;\n        const recognitionMode = CognitiveSpeech.RecognitionMode.Interactive;\n        const format = CognitiveSpeech.SpeechResultFormat.Simple;\n        const locale = properties.locale || 'en-US';\n\n        let recognizerConfig = new CognitiveSpeech.RecognizerConfig(\n            new CognitiveSpeech.SpeechConfig(\n                new CognitiveSpeech.Context(\n                    new CognitiveSpeech.OS(navigator.userAgent, \"Browser\", null),\n                    new CognitiveSpeech.Device(\"WebChat\", \"WebChat\", \"1.0.00000\"))),\n            recognitionMode,        // Speech.RecognitionMode.Interactive  (Options - Interactive/Conversation/Dictation>)\n            locale,                 // Supported laguages are specific to each recognition mode. Refer to docs.\n            format\n        );                // Speech.SpeechResultFormat.Simple (Options - Simple/Detailed)\n\n        let authentication;\n        if (properties.subscriptionKey) {\n            authentication = new CognitiveSpeech.CognitiveSubscriptionKeyAuthentication(properties.subscriptionKey);\n        } else if (properties.fetchCallback && properties.fetchOnExpiryCallback) {\n            authentication = new CognitiveSpeech.CognitiveTokenAuthentication(\n                (authFetchEventId: string) => {\n                    let d = new CognitiveSpeech.Deferred<string>();\n                    this.properties.fetchCallback(authFetchEventId).then(value => d.Resolve(value), err => d.Reject(err));\n                    return d.Promise();\n                },\n                (authFetchEventId: string) => {\n                    let d = new CognitiveSpeech.Deferred<string>();\n                    this.properties.fetchOnExpiryCallback(authFetchEventId).then(value => d.Resolve(value), err => d.Reject(err));\n                    return d.Promise();\n                }\n            );\n        } else {\n            throw 'Error: The CognitiveServicesSpeechRecognizer requires either a subscriptionKey or a fetchCallback and fetchOnExpiryCallback.';\n        }\n\n        if(window.navigator.getUserMedia){\n            this.actualRecognizer = CognitiveSpeech.CreateRecognizer(recognizerConfig, authentication);\n        }\n        else{\n            console.error(\"This browser does not support speech recognition\");\n        }\n    }\n\n    public warmup() {\n    }\n\n    public async startRecognizing() {\n        if (!this.actualRecognizer) {\n            this.log('ERROR: no recognizer?');\n            return;\n        }\n        let eventhandler = (event: any) => {\n            this.log(event.Name);\n            switch (event.Name) {\n                case 'RecognitionTriggeredEvent':\n                case 'ListeningStartedEvent':\n                case 'SpeechStartDetectedEvent':\n                case 'SpeechEndDetectedEvent':\n                case 'SpeechDetailedPhraseEvent':\n                case 'ConnectingToServiceEvent':\n                    break;\n                case 'RecognitionStartedEvent':\n                    if (this.onAudioStreamingToService) {\n                        this.onAudioStreamingToService()\n                    }\n                    this.isStreamingToService = true;\n                    break;\n                case 'SpeechHypothesisEvent':\n                    let hypothesisEvent = event as CognitiveSpeech.SpeechHypothesisEvent;\n                    this.log('Hypothesis Result: ' + hypothesisEvent.Result.Text);\n                    if (this.onIntermediateResult) {\n                        this.onIntermediateResult(hypothesisEvent.Result.Text);\n                    }\n                    break;\n                case 'SpeechSimplePhraseEvent':\n                    let simplePhraseEvent = event as CognitiveSpeech.SpeechSimplePhraseEvent;\n                    if (CognitiveSpeech.RecognitionStatus[simplePhraseEvent.Result.RecognitionStatus] as any === CognitiveSpeech.RecognitionStatus.Success) {\n                        if (this.onFinalResult) {\n                            this.onFinalResult(simplePhraseEvent.Result.DisplayText);\n                        }\n                    } else {\n                        if (this.onRecognitionFailed) {\n                            this.onRecognitionFailed();\n                        }\n                        this.log('Recognition Status: ' + simplePhraseEvent.Result.RecognitionStatus.toString());\n                    }\n                    break;\n                case 'RecognitionEndedEvent':\n                    this.isStreamingToService = false;\n                    break;\n                default:\n                    this.log(event.Name + \" is unexpected\");\n            }\n        }\n\n        let speechContext = null;\n        if (this.referenceGrammarId) {\n            speechContext = JSON.stringify({\n                dgi: {\n                    Groups: [\n                        {\n                            Type: \"Generic\",\n                            Hints: { ReferenceGrammar: this.referenceGrammarId }\n                        }\n                    ]\n                }\n            });\n        }\n\n        return this.actualRecognizer.Recognize(eventhandler, speechContext);\n    }\n\n    public speechIsAvailable(){\n        return this.actualRecognizer != null;\n    }\n\n    public async stopRecognizing() {\n        if (this.actualRecognizer != null) {\n            this.actualRecognizer.AudioSource.TurnOff();\n        }\n\n        this.isStreamingToService = false;\n\n        return;\n    }\n\n    private log(message: string) {\n        konsole.log('CognitiveServicesSpeechRecognizer: ' + message);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/CognitiveServices/SpeechRecognition.ts","import { Speech, Action } from '../SpeechModule'\nimport * as konsole from '../Konsole';\n\nexport interface ICognitiveServicesSpeechSynthesisProperties {\n    subscriptionKey?: string,\n    gender?: SynthesisGender,\n    voiceName?: string,\n    fetchCallback?: (authFetchEventId: string) => Promise<string>,\n    fetchOnExpiryCallback?: (authFetchEventId: string) => Promise<string>\n}\n\nexport enum SynthesisGender { Male, Female };\n\ninterface SpeakRequest {\n    isReadyToPlay: boolean,\n    data: ArrayBuffer,\n    text: string,\n    locale: string,\n    onSpeakingStarted: Action,\n    onSpeakingFinished: Action,\n}\n\ninterface HttpHeader {\n    name: string,\n    value: string\n}\n\ninterface webkitAudioContext extends AudioContext {\n}\n\ndeclare var webkitAudioContext: {\n    prototype: webkitAudioContext;\n    new(): webkitAudioContext;\n}\n\nexport class SpeechSynthesizer implements Speech.ISpeechSynthesizer {\n    private _requestQueue: SpeakRequest[] = null;\n    private _isPlaying: boolean = false;\n    private _audioElement: AudioContext;\n    private _helper: CognitiveServicesHelper;\n    private _properties: ICognitiveServicesSpeechSynthesisProperties;\n\n    constructor(properties: ICognitiveServicesSpeechSynthesisProperties) {\n        this._helper = new CognitiveServicesHelper(properties);\n        this._properties = properties;\n        this._requestQueue = new Array();\n    }\n\n    speak(text: string, lang: string, onSpeakingStarted: Action = null, onSpeakingFinished: Action = null): void {\n        this._requestQueue.push(\n            {\n                isReadyToPlay: false,\n                data: null,\n                text: text,\n                locale: lang,\n                onSpeakingStarted: onSpeakingStarted,\n                onSpeakingFinished: onSpeakingFinished\n            }\n        );\n        this.getSpeechData().then(() => {\n            this.playAudio();\n        });\n    }\n\n    stopSpeaking(): void {\n        if (this._isPlaying) {\n            this._requestQueue = [];\n            this._isPlaying = false;\n            if (this._audioElement && this._audioElement.state !== \"closed\") {\n                this._audioElement.close();\n            }\n        }\n    }\n\n    private playAudio() {\n        if (this._requestQueue.length == 0) {\n            return;\n        }\n        const top = this._requestQueue[0];\n        if (!top) {\n            return;\n        }\n        if (!top.isReadyToPlay) {\n            window.setTimeout(() => this.playAudio(), 100);\n            return;\n        }\n        if (!this._isPlaying) {\n            this._isPlaying = true;\n            if (!this._audioElement || this._audioElement.state === \"closed\") {\n                if (typeof webkitAudioContext !== \"undefined\") {\n                    this._audioElement = new webkitAudioContext();\n                }\n                else {\n                    this._audioElement = new AudioContext();\n                }\n            }\n            this._audioElement.decodeAudioData(top.data, (buffer) => {\n                const source = this._audioElement.createBufferSource();\n                source.buffer = buffer;\n                source.connect(this._audioElement.destination);\n                if (top.onSpeakingStarted) {\n                    top.onSpeakingStarted();\n                }\n                source.start(0);\n                source.onended = (event) => {\n                    this._isPlaying = false;\n                    if (top.onSpeakingFinished) {\n                        top.onSpeakingFinished();\n                    }\n                    this._requestQueue = this._requestQueue.slice(1, this._requestQueue.length);\n                    if (this._requestQueue.length > 0) {\n                        this.playAudio();\n                    }\n                }\n            }, (ex) => {\n                this.log(ex.message);\n                this._isPlaying = false;\n                this._requestQueue = this._requestQueue.slice(1, this._requestQueue.length);\n                if (this._requestQueue.length > 0) {\n                    this.playAudio();\n                }\n            });\n        }\n    }\n\n    private getSpeechData(): Promise<any> {\n        if (this._requestQueue.length == 0) {\n            return;\n        }\n        const latest = this._requestQueue[this._requestQueue.length - 1];\n        return this._helper.fetchSpeechData(latest.text, latest.locale, this._properties).then((result) => {\n            latest.data = result;\n            latest.isReadyToPlay = true;\n        }, (ex) => {\n            // Failed to get the speech data, ignore this item\n            this.log(ex);\n            this._requestQueue = this._requestQueue.slice(0, this._requestQueue.length - 1);\n        });\n    }\n\n    private log(message: string) {\n        konsole.log('CognitiveServicesSpeechSynthesis: ' + message);\n    }\n}\n\nclass CognitiveServicesHelper {\n    private readonly _tokenURL = \"https://api.cognitive.microsoft.com/sts/v1.0/issueToken\";\n    private readonly _synthesisURL = \"https://speech.platform.bing.com/synthesize\";\n    private readonly _outputFormat = \"riff-16khz-16bit-mono-pcm\";\n    private _tokenCallback: (id: string) => Promise<string>;\n    private _tokenExpiredCallback: (id: string) => Promise<string>;\n    private _lastTokenTime: number;\n\n    constructor(props: ICognitiveServicesSpeechSynthesisProperties) {\n        if (props.subscriptionKey) {\n            this._tokenCallback = (id: string) => this.fetchSpeechToken(id);\n            this._tokenExpiredCallback = (id: string) => this.fetchSpeechToken(id);\n        }\n        else if (props.fetchCallback && props.fetchOnExpiryCallback) {\n            this._tokenCallback = props.fetchCallback;\n            this._tokenExpiredCallback = props.fetchOnExpiryCallback;\n        }\n        else {\n            throw 'Error: The CognitiveServicesSpeechSynthesis requires either a subscriptionKey or a fetchCallback and a fetchOnExpiryCallback.';\n        }\n    }\n\n    public fetchSpeechData(text: string, locale: string, synthesisProperties: ICognitiveServicesSpeechSynthesisProperties): Promise<any> {\n        const SSML = this.makeSSML(text, locale, synthesisProperties);\n        const cbAfterToken = (token: string) => {\n            this._lastTokenTime = Date.now();\n\n            const optionalHeaders = [{ name: \"Content-type\", value: 'application/ssml+xml' },\n            { name: \"X-Microsoft-OutputFormat\", value: this._outputFormat },\n            { name: \"Authorization\", value: token }];\n\n            return this.makeHttpCall(\"POST\", this._synthesisURL, true, optionalHeaders, SSML);\n        };\n\n        if (Date.now() - this._lastTokenTime > 500000) {\n            return this._tokenExpiredCallback(synthesisProperties.subscriptionKey).then(token => cbAfterToken(token));\n        }\n        else {\n            return this._tokenCallback(synthesisProperties.subscriptionKey).then(token => cbAfterToken(token));\n        }\n    }\n\n    private makeSSML(text: string, locale: string, synthesisProperties: ICognitiveServicesSpeechSynthesisProperties): string {\n        if (text.indexOf(\"<speak\") === 0) {\n            return this.processSSML(text, synthesisProperties);\n        }\n        else {\n            let ssml = \"<speak version='1.0' xml:lang='\" + locale + \"'><voice xml:lang='\" + locale + \"' xml:gender='\" + (synthesisProperties && synthesisProperties.gender ? SynthesisGender[synthesisProperties.gender] : \"Female\") + \"' name='\";\n            if (synthesisProperties.voiceName) {\n                ssml += synthesisProperties.voiceName;\n            }\n            else if (synthesisProperties.gender !== null && synthesisProperties.gender !== undefined) {\n                ssml += this.fetchVoiceName(locale, synthesisProperties.gender);\n            }\n            else {\n                ssml += this.fetchVoiceName(locale, SynthesisGender.Female);\n            }\n            return ssml + \"'>\" + this.encodeHTML(text) + \"</voice></speak>\";\n        }\n    }\n\n    private processSSML(ssml: string, synthesisProperties: ICognitiveServicesSpeechSynthesisProperties): string {\n        let processDone: boolean = false;\n\n        // Extract locale info from ssml\n        let locale: string;\n        const match = /xml:lang=['\"](\\w\\w-\\w\\w)['\"]/.exec(ssml);\n        if (match) {\n            locale = match[1];\n        }\n        else {\n            locale = \"en-us\";\n        }\n\n        // Extract gender from properties\n        let gender = synthesisProperties && synthesisProperties.gender;\n        if (gender === null || gender === undefined) {\n            gender = SynthesisGender.Female;\n        }\n        const parser = new DOMParser();\n        const dom = parser.parseFromString(ssml, 'text/xml');\n        const nodes = dom.documentElement.childNodes;\n\n        // Check if there is a voice node\n        for (let i = 0; i < nodes.length; ++i) {\n            if (nodes[i].nodeName === \"voice\") {\n                // Check if there is a name attribute on voice element\n                for (let j = 0; j < nodes[i].attributes.length; ++j) {\n                    if (nodes[i].attributes[j].nodeName === \"name\") {\n                        // Name attribute is found on voice element, use it directly\n                        processDone = true;\n                        break;\n                    }\n\n                    // Find the gender info from voice element, this will override what is in the properties\n                    if (nodes[i].attributes[j].nodeName === \"xml:gender\") {\n                        gender = nodes[i].attributes[j].nodeValue.toLowerCase() === 'male' ? SynthesisGender.Male : SynthesisGender.Female;\n                    }\n                }\n\n                if (!processDone) {\n                    // Otherwise add the name attribute based on locale and gender\n                    const attribute = dom.createAttribute(\"name\");\n                    attribute.value = (synthesisProperties && synthesisProperties.voiceName) || this.fetchVoiceName(locale, gender);\n                    nodes[i].attributes.setNamedItem(attribute);\n                    processDone = true;\n                }\n                break;\n            }\n        }\n        const serializer = new XMLSerializer();\n        if (!processDone) {\n            // There is no voice element, add one based on locale\n            const voiceNode = dom.createElement(\"voice\") as Node;\n            const attribute = dom.createAttribute(\"name\");\n            attribute.value = (synthesisProperties && synthesisProperties.voiceName) || this.fetchVoiceName(locale, gender);\n            voiceNode.attributes.setNamedItem(attribute);\n            while (nodes.length > 0) {\n                voiceNode.appendChild(dom.documentElement.firstChild);\n            }\n            dom.documentElement.appendChild(voiceNode);\n        }\n        return serializer.serializeToString(dom);\n    }\n\n    private encodeHTML(text: string): string {\n        return text.replace(/&/g, '&amp;')\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;')\n            .replace(/\"/g, '&quot;')\n            .replace(/'/g, '&apos;');\n    }\n\n    private fetchSpeechToken(apiKey: string): Promise<string> {\n        const optionalHeaders: HttpHeader[] = [{ name: \"Ocp-Apim-Subscription-Key\", value: apiKey },\n        // required for Firefox otherwise a CORS error is raised\n        { name: \"Access-Control-Allow-Origin\", value: \"*\" }];\n        return this.makeHttpCall(\"POST\", this._tokenURL, false, optionalHeaders).then((text) => {\n            konsole.log(\"New authentication token generated.\");\n            return Promise.resolve(text);\n        }, (ex) => {\n            const reason = \"Failed to generate authentication token\";\n            konsole.log(reason);\n            return Promise.reject(reason);\n        });\n    }\n\n    private makeHttpCall(actionType: string, url: string, isArrayBuffer: boolean = false, optionalHeaders?: HttpHeader[], dataToSend?: any): Promise<any> {\n        return new Promise<any>((resolve, reject) => {\n            const xhr = new XMLHttpRequest();\n            if (isArrayBuffer) {\n                xhr.responseType = 'arraybuffer';\n            }\n            xhr.onreadystatechange = function (event) {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status >= 200 && xhr.status < 300) {\n                    if (!isArrayBuffer) {\n                        resolve(xhr.responseText);\n                    }\n                    else {\n                        resolve(xhr.response);\n                    }\n                } else {\n                    reject(xhr.status);\n                }\n            };\n            try {\n                xhr.open(actionType, url, true);\n                if (optionalHeaders) {\n                    optionalHeaders.forEach((header) => {\n                        xhr.setRequestHeader(header.name, header.value);\n                    });\n                }\n                if (dataToSend) {\n                    xhr.send(dataToSend);\n                }\n                else {\n                    xhr.send();\n                }\n            }\n            catch (ex) {\n                reject(ex)\n            }\n        });\n    }\n\n    private fetchVoiceName(locale: string, gender: SynthesisGender): string {\n        let voiceName: string;\n        const localeLowerCase = locale.toLowerCase();\n        if (gender === SynthesisGender.Female) {\n            voiceName = this._femaleVoiceMap[localeLowerCase] || this._femaleVoiceMap[\"en-us\"];\n        }\n        else {\n            voiceName = this._maleVoiceMap[localeLowerCase] || this._maleVoiceMap[\"en-us\"];\n        }\n        return voiceName;\n    }\n\n    // source: https://docs.microsoft.com/en-us/azure/cognitive-services/speech/api-reference-rest/bingvoiceoutput\n    private readonly _femaleVoiceMap: { [key: string]: string } = {\n        \"ar-eg\": \"Microsoft Server Speech Text to Speech Voice (ar-EG, Hoda)\",\n        \"ca-es\": \"Microsoft Server Speech Text to Speech Voice (ca-ES, HerenaRUS)\",\n        \"da-dk\": \"Microsoft Server Speech Text to Speech Voice (da-DK, HelleRUS)\",\n        \"de-de\": \"Microsoft Server Speech Text to Speech Voice (de-DE, Hedda)\",\n        \"en-au\": \"Microsoft Server Speech Text to Speech Voice (en-AU, Catherine)\",\n        \"en-ca\": \"Microsoft Server Speech Text to Speech Voice (en-CA, Linda)\",\n        \"en-gb\": \"Microsoft Server Speech Text to Speech Voice (en-GB, Susan, Apollo)\",\n        \"en-in\": \"Microsoft Server Speech Text to Speech Voice (en-IN, Heera, Apollo)\",\n        \"en-us\": \"Microsoft Server Speech Text to Speech Voice (en-US, ZiraRUS)\",\n        \"es-es\": \"Microsoft Server Speech Text to Speech Voice (es-ES, Laura, Apollo)\",\n        \"es-mx\": \"Microsoft Server Speech Text to Speech Voice (es-MX, HildaRUS)\",\n        \"fi-fi\": \"Microsoft Server Speech Text to Speech Voice (fi-FI, HeidiRUS)\",\n        \"fr-ca\": \"Microsoft Server Speech Text to Speech Voice (fr-CA, Caroline)\",\n        \"fr-fr\": \"Microsoft Server Speech Text to Speech Voice (fr-FR, Julie, Apollo)\",\n        \"hi-in\": \"Microsoft Server Speech Text to Speech Voice (hi-IN, Kalpana, Apollo)\",\n        \"ja-jp\": \"Microsoft Server Speech Text to Speech Voice (ja-JP, Ayumi, Apollo)\",\n        \"ko-kr\": \"Microsoft Server Speech Text to Speech Voice (ko-KR, HeamiRUS)\",\n        \"nb-no\": \"Microsoft Server Speech Text to Speech Voice (nb-NO, HuldaRUS)\",\n        \"nl-nl\": \"Microsoft Server Speech Text to Speech Voice (nl-NL, HannaRUS)\",\n        \"pl-pl\": \"Microsoft Server Speech Text to Speech Voice (pl-PL, PaulinaRUS)\",\n        \"pt-br\": \"Microsoft Server Speech Text to Speech Voice (pt-BR, HeloisaRUS)\",\n        \"pt-pt\": \"Microsoft Server Speech Text to Speech Voice (pt-PT, HeliaRUS)\",\n        \"ru-ru\": \"Microsoft Server Speech Text to Speech Voice (ru-RU, Irina, Apollo)\",\n        \"sv-se\": \"Microsoft Server Speech Text to Speech Voice (sv-SE, HedvigRUS)\",\n        \"tr-tr\": \"Microsoft Server Speech Text to Speech Voice (tr-TR, SedaRUS)\",\n        \"zh-cn\": \"Microsoft Server Speech Text to Speech Voice (zh-CN, HuihuiRUS)\",\n        \"zh-hk\": \"Microsoft Server Speech Text to Speech Voice (zh-HK, Tracy, Apollo)\",\n        \"zh-tw\": \"Microsoft Server Speech Text to Speech Voice (zh-TW, Yating, Apollo)\"\n    };\n\n    private readonly _maleVoiceMap: { [key: string]: string } = {\n        \"ar-sa\": \"Microsoft Server Speech Text to Speech Voice (ar-SA, Naayf)\",\n        \"cs-cz\": \"Microsoft Server Speech Text to Speech Voice (cs-CZ, Vit)\",\n        \"de-at\": \"Microsoft Server Speech Text to Speech Voice (de-AT, Michael)\",\n        \"de-ch\": \"Microsoft Server Speech Text to Speech Voice (de-CH, Karsten)\",\n        \"de-de\": \"Microsoft Server Speech Text to Speech Voice (de-DE, Stefan, Apollo)\",\n        \"el-gr\": \"Microsoft Server Speech Text to Speech Voice (el-GR, Stefanos)\",\n        \"en-gb\": \"Microsoft Server Speech Text to Speech Voice (en-GB, George, Apollo)\",\n        \"en-ie\": \"Microsoft Server Speech Text to Speech Voice (en-IE, Shaun)\",\n        \"en-in\": \"Microsoft Server Speech Text to Speech Voice (en-IN, Ravi, Apollo)\",\n        \"en-us\": \"Microsoft Server Speech Text to Speech Voice (en-US, BenjaminRUS)\",\n        \"es-es\": \"Microsoft Server Speech Text to Speech Voice (es-ES, Pablo, Apollo)\",\n        \"es-mx\": \"Microsoft Server Speech Text to Speech Voice (es-MX, Raul, Apollo)\",\n        \"fr-ch\": \"Microsoft Server Speech Text to Speech Voice (fr-CH, Guillaume)\",\n        \"fr-fr\": \"Microsoft Server Speech Text to Speech Voice (fr-FR, Paul, Apollo)\",\n        \"he-il\": \"Microsoft Server Speech Text to Speech Voice (he-IL, Asaf)\",\n        \"hi-in\": \"Microsoft Server Speech Text to Speech Voice (hi-IN, Hemant)\",\n        \"hu-hu\": \"Microsoft Server Speech Text to Speech Voice (hu-HU, Szabolcs)\",\n        \"id-id\": \"Microsoft Server Speech Text to Speech Voice (id-ID, Andika)\",\n        \"it-it\": \"Microsoft Server Speech Text to Speech Voice (it-IT, Cosimo, Apollo)\",\n        \"ja-jp\": \"Microsoft Server Speech Text to Speech Voice (ja-JP, Ichiro, Apollo)\",\n        \"pt-br\": \"Microsoft Server Speech Text to Speech Voice (pt-BR, Daniel, Apollo)\",\n        \"ro-ro\": \"Microsoft Server Speech Text to Speech Voice (ro-RO, Andrei)\",\n        \"ru-ru\": \"Microsoft Server Speech Text to Speech Voice (ru-RU, Pavel, Apollo)\",\n        \"sk-sk\": \"Microsoft Server Speech Text to Speech Voice (sk-SK, Filip)\",\n        \"th-th\": \"Microsoft Server Speech Text to Speech Voice (th-TH, Pattara)\",\n        \"zh-cn\": \"Microsoft Server Speech Text to Speech Voice (zh-CN, Kangkang, Apollo)\",\n        \"zh-hk\": \"Microsoft Server Speech Text to Speech Voice (zh-HK, Danny, Apollo)\",\n        \"zh-tw\": \"Microsoft Server Speech Text to Speech Voice (zh-TW, Zhiwei, Apollo)\"\n    };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/CognitiveServices/SpeechSynthesis.ts","import { ConsoleLoggingListener, LocalStorage, SessionStorage } from \"./src/common.browser/Exports\";\nimport { Events, Storage } from \"./src/common/Exports\";\n\n// Common.Storage.SetLocalStorage(new Common.Browser.LocalStorage());\n// Common.Storage.SetSessionStorage(new Common.Browser.SessionStorage());\nEvents.Instance.AttachListener(new ConsoleLoggingListener());\n\nexport * from \"./src/common/Exports\";\nexport * from \"./src/common.browser/Exports\";\nexport * from \"./src/sdk/speech/Exports\";\nexport * from \"./src/sdk/speech.browser/Exports\";\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/Speech.Browser.Sdk.ts","import { EventType, IEventListener, PlatformEvent } from \"../common/Exports\";\n\nexport class ConsoleLoggingListener implements IEventListener<PlatformEvent> {\n    private logLevelFilter: EventType;\n\n    public constructor(logLevelFilter: EventType = EventType.Warning) {\n        this.logLevelFilter = logLevelFilter;\n    }\n\n    public OnEvent = (event: PlatformEvent): void => {\n        if (event.EventType >= this.logLevelFilter) {\n            const log = this.ToString(event);\n\n            switch (event.EventType) {\n                case EventType.Debug:\n                    // tslint:disable-next-line:no-console\n                    console.debug(log);\n                    break;\n                case EventType.Info:\n                    // tslint:disable-next-line:no-console\n                    console.info(log);\n                    break;\n                case EventType.Warning:\n                    // tslint:disable-next-line:no-console\n                    console.warn(log);\n                    break;\n                case EventType.Error:\n                    // tslint:disable-next-line:no-console\n                    console.error(log);\n                    break;\n                default:\n                    // tslint:disable-next-line:no-console\n                    console.log(log);\n                    break;\n            }\n        }\n    }\n\n    private ToString = (event: any): string => {\n        const logFragments = [\n            `${event.EventTime}`,\n            `${event.Name}`,\n        ];\n\n        for (const prop in event) {\n            if (prop && event.hasOwnProperty(prop) && prop !== \"eventTime\" && prop !== \"eventType\" && prop !== \"eventId\" && prop !== \"name\" && prop !== \"constructor\") {\n                const value = event[prop];\n                let valueToLog = \"<NULL>\";\n                if (value !== undefined && value !== null) {\n                    if (typeof (value) === \"number\" || typeof (value) === \"string\") {\n                        valueToLog = value.toString();\n                    } else {\n                        valueToLog = JSON.stringify(value);\n                    }\n                }\n\n                logFragments.push(`${prop}: ${valueToLog}`);\n            }\n\n        }\n\n        return logFragments.join(\" | \");\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/common.browser/ConsoleLoggingListener.ts","import {\n    AudioSourceErrorEvent,\n    AudioSourceEvent,\n    AudioSourceInitializingEvent,\n    AudioSourceOffEvent,\n    AudioSourceReadyEvent,\n    AudioStreamNodeAttachedEvent,\n    AudioStreamNodeAttachingEvent,\n    AudioStreamNodeDetachedEvent,\n    AudioStreamNodeErrorEvent,\n    CreateNoDashGuid,\n    Events,\n    EventSource,\n    IAudioSource,\n    IAudioStreamNode,\n    IStringDictionary,\n    PlatformEvent,\n    Promise,\n    PromiseHelper,\n    Stream,\n    StreamReader,\n} from \"../common/Exports\";\n\nimport { Timer } from \"../common.browser/Exports\";\n\nexport class FileAudioSource implements IAudioSource {\n\n    // Recommended sample rate (bytes/second).\n    private static readonly SAMPLE_RATE: number = 16000 * 2; // 16 kHz * 16 bits\n\n    // We should stream audio at no faster than 2x real-time (i.e., send five chunks\n    // per second, with the chunk size == sample rate in bytes per second * 2 / 5).\n    private static readonly CHUNK_SIZE: number = FileAudioSource.SAMPLE_RATE * 2 / 5;\n\n    private static readonly UPLOAD_INTERVAL: number = 200; // milliseconds\n\n    // 10 seconds of audio in bytes =\n    // sample rate (bytes/second) * 600 (seconds) + 44 (size of the wave header).\n    private static readonly MAX_SIZE: number = FileAudioSource.SAMPLE_RATE * 600 + 44;\n\n    private streams: IStringDictionary<Stream<ArrayBuffer>> = {};\n\n    private id: string;\n\n    private events: EventSource<AudioSourceEvent>;\n\n    private file: File;\n\n    public constructor(file: File, audioSourceId?: string) {\n        this.id = audioSourceId ? audioSourceId : CreateNoDashGuid();\n        this.events = new EventSource<AudioSourceEvent>();\n        this.file = file;\n    }\n\n    public TurnOn = (): Promise<boolean> => {\n        if (typeof FileReader === \"undefined\") {\n            const errorMsg = \"Browser does not support FileReader.\";\n            this.OnEvent(new AudioSourceErrorEvent(errorMsg, \"\")); // initialization error - no streamid at this point\n            return PromiseHelper.FromError<boolean>(errorMsg);\n        } else if (this.file.name.lastIndexOf(\".wav\") !== this.file.name.length - 4) {\n            const errorMsg = this.file.name + \" is not supported. Only WAVE files are allowed at the moment.\";\n            this.OnEvent(new AudioSourceErrorEvent(errorMsg, \"\"));\n            return PromiseHelper.FromError<boolean>(errorMsg);\n        } else if (this.file.size > FileAudioSource.MAX_SIZE) {\n            const errorMsg = this.file.name + \" exceeds the maximum allowed file size (\" + FileAudioSource.MAX_SIZE + \").\";\n            this.OnEvent(new AudioSourceErrorEvent(errorMsg, \"\"));\n            return PromiseHelper.FromError<boolean>(errorMsg);\n        }\n\n        this.OnEvent(new AudioSourceInitializingEvent(this.id)); // no stream id\n        this.OnEvent(new AudioSourceReadyEvent(this.id));\n        return PromiseHelper.FromResult(true);\n    }\n\n    public Id = (): string => {\n        return this.id;\n    }\n\n    public Attach = (audioNodeId: string): Promise<IAudioStreamNode> => {\n        this.OnEvent(new AudioStreamNodeAttachingEvent(this.id, audioNodeId));\n\n        return this.Upload(audioNodeId).OnSuccessContinueWith<IAudioStreamNode>(\n            (streamReader: StreamReader<ArrayBuffer>) => {\n                this.OnEvent(new AudioStreamNodeAttachedEvent(this.id, audioNodeId));\n                return {\n                    Detach: () => {\n                        streamReader.Close();\n                        delete this.streams[audioNodeId];\n                        this.OnEvent(new AudioStreamNodeDetachedEvent(this.id, audioNodeId));\n                        this.TurnOff();\n                    },\n                    Id: () => {\n                        return audioNodeId;\n                    },\n                    Read: () => {\n                        return streamReader.Read();\n                    },\n                };\n            });\n    }\n\n    public Detach = (audioNodeId: string): void => {\n        if (audioNodeId && this.streams[audioNodeId]) {\n            this.streams[audioNodeId].Close();\n            delete this.streams[audioNodeId];\n            this.OnEvent(new AudioStreamNodeDetachedEvent(this.id, audioNodeId));\n        }\n    }\n\n    public TurnOff = (): Promise<boolean> => {\n        for (const streamId in this.streams) {\n            if (streamId) {\n                const stream = this.streams[streamId];\n                if (stream && !stream.IsClosed) {\n                    stream.Close();\n                }\n            }\n        }\n\n        this.OnEvent(new AudioSourceOffEvent(this.id)); // no stream now\n        return PromiseHelper.FromResult(true);\n    }\n\n    public get Events(): EventSource<AudioSourceEvent> {\n        return this.events;\n    }\n\n    private Upload = (audioNodeId: string): Promise<StreamReader<ArrayBuffer>> => {\n        return this.TurnOn()\n            .OnSuccessContinueWith<StreamReader<ArrayBuffer>>((_: boolean) => {\n                const stream = new Stream<ArrayBuffer>(audioNodeId);\n\n                this.streams[audioNodeId] = stream;\n\n                const reader: FileReader = new FileReader();\n\n                let startOffset = 0;\n                let endOffset = FileAudioSource.CHUNK_SIZE;\n                let lastWriteTimestamp = 0;\n\n                const processNextChunk = (event: Event): void => {\n                    if (stream.IsClosed) {\n                        return; // output stream was closed (somebody called TurnOff). We're done here.\n                    }\n\n                    if (lastWriteTimestamp !== 0) {\n                        const delay = Date.now() - lastWriteTimestamp;\n                        if (delay < FileAudioSource.UPLOAD_INTERVAL) {\n                            // It's been less than the \"upload interval\" since we've uploaded the\n                            // last chunk. Schedule the next upload to make sure that we're sending\n                            // upstream roughly one chunk per upload interval.\n                            new Timer(FileAudioSource.UPLOAD_INTERVAL - delay, processNextChunk).start();\n                            return;\n                        }\n                    }\n\n                    stream.Write(reader.result);\n                    lastWriteTimestamp = Date.now();\n\n                    if (endOffset < this.file.size) {\n                        startOffset = endOffset;\n                        endOffset = Math.min(endOffset + FileAudioSource.CHUNK_SIZE, this.file.size);\n                        const chunk = this.file.slice(startOffset, endOffset);\n                        reader.readAsArrayBuffer(chunk);\n                    } else {\n                        // we've written the entire file to the output stream, can close it now.\n                        stream.Close();\n                    }\n                };\n\n                reader.onload = processNextChunk;\n\n                reader.onerror = (event: ErrorEvent) => {\n                    const errorMsg = `Error occurred while processing '${this.file.name}'. ${event.error}`;\n                    this.OnEvent(new AudioStreamNodeErrorEvent(this.id, audioNodeId, event.error));\n                    throw new Error(errorMsg);\n                };\n\n                const chunk = this.file.slice(startOffset, endOffset);\n                reader.readAsArrayBuffer(chunk);\n\n                return stream.GetReader();\n            });\n    }\n\n    private OnEvent = (event: AudioSourceEvent): void => {\n        this.events.OnEvent(event);\n        Events.Instance.OnEvent(event);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/common.browser/FileAudioSource.ts","import { ArgumentNullError, IKeyValueStorage } from \"../common/Exports\";\n\nexport class LocalStorage implements IKeyValueStorage {\n\n    public Get = (key: string): string => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        return localStorage.getItem(key);\n    }\n\n    public GetOrAdd = (key: string, valueToAdd: string): string => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        const value = localStorage.getItem(key);\n        if (value === null || value === undefined) {\n            localStorage.setItem(key, valueToAdd);\n        }\n\n        return localStorage.getItem(key);\n    }\n\n    public Set = (key: string, value: string): void => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        localStorage.setItem(key, value);\n    }\n\n    public Remove = (key: string): void => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        localStorage.removeItem(key);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/common.browser/LocalStorage.ts","import {\n    AudioSourceErrorEvent,\n    AudioSourceEvent,\n    AudioSourceInitializingEvent,\n    AudioSourceOffEvent,\n    AudioSourceReadyEvent,\n    AudioStreamNodeAttachedEvent,\n    AudioStreamNodeAttachingEvent,\n    AudioStreamNodeDetachedEvent,\n    AudioStreamNodeErrorEvent,\n    CreateNoDashGuid,\n    Deferred,\n    Events,\n    EventSource,\n    IAudioSource,\n    IAudioStreamNode,\n    IStringDictionary,\n    PlatformEvent,\n    Promise,\n    PromiseHelper,\n    Stream,\n    StreamReader,\n} from \"../common/Exports\";\nimport { IRecorder } from \"./IRecorder\";\n\n// Extending the default definition with browser specific definitions for backward compatibility\ninterface INavigatorUserMedia extends NavigatorUserMedia {\n    webkitGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\n    mozGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\n    msGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\n}\n\nexport class MicAudioSource implements IAudioSource {\n\n    private streams: IStringDictionary<Stream<ArrayBuffer>> = {};\n\n    private id: string;\n\n    private events: EventSource<AudioSourceEvent>;\n\n    private initializeDeferral: Deferred<boolean>;\n\n    private recorder: IRecorder;\n\n    private mediaStream: MediaStream;\n\n    private context: AudioContext;\n\n    public constructor(recorder: IRecorder, audioSourceId?: string) {\n        this.id = audioSourceId ? audioSourceId : CreateNoDashGuid();\n        this.events = new EventSource<AudioSourceEvent>();\n        this.recorder = recorder;\n    }\n\n    public TurnOn = (): Promise<boolean> => {\n        if (this.initializeDeferral) {\n            return this.initializeDeferral.Promise();\n        }\n\n        this.initializeDeferral = new Deferred<boolean>();\n\n        this.CreateAudioContext();\n\n        const nav = window.navigator as INavigatorUserMedia;\n\n        let getUserMedia = (\n            nav.getUserMedia ||\n            nav.webkitGetUserMedia ||\n            nav.mozGetUserMedia ||\n            nav.msGetUserMedia\n        );\n\n        if (!!nav.mediaDevices) {\n            getUserMedia = (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback): void => {\n                nav.mediaDevices\n                    .getUserMedia(constraints)\n                    .then(successCallback)\n                    .catch(errorCallback);\n            };\n        }\n\n        if (!getUserMedia) {\n            const errorMsg = \"Browser does not support getUserMedia.\";\n            this.initializeDeferral.Reject(errorMsg);\n            this.OnEvent(new AudioSourceErrorEvent(errorMsg, \"\")); // mic initialized error - no streamid at this point\n        } else {\n            const next = () => {\n                this.OnEvent(new AudioSourceInitializingEvent(this.id)); // no stream id\n                getUserMedia(\n                    { audio: true, video: false },\n                    (mediaStream: MediaStream) => {\n                        this.mediaStream = mediaStream;\n                        this.OnEvent(new AudioSourceReadyEvent(this.id));\n                        this.initializeDeferral.Resolve(true);\n                    }, (error: MediaStreamError) => {\n                        const errorMsg = `Error occurred during microphone initialization: ${error}`;\n                        const tmp = this.initializeDeferral;\n                        // HACK: this should be handled through onError callbacks of all promises up the stack.\n                        // Unfortunately, the current implementation does not provide an easy way to reject promises\n                        // without a lot of code replication.\n                        // TODO: fix promise implementation, allow for a graceful reject chaining.\n                        this.initializeDeferral = null;\n                        tmp.Reject(errorMsg); // this will bubble up through the whole chain of promises,\n                        // with each new level adding extra \"Unhandled callback error\" prefix to the error message.\n                        // The following line is not guaranteed to be executed.\n                        this.OnEvent(new AudioSourceErrorEvent(this.id, errorMsg));\n                    });\n            };\n\n            if (this.context.state === \"suspended\") {\n                // NOTE: On iOS, the Web Audio API requires sounds to be triggered from an explicit user action.\n                // https://github.com/WebAudio/web-audio-api/issues/790\n                this.context.resume().then(next, (reason: any) => {\n                    this.initializeDeferral.Reject(`Failed to initialize audio context: ${reason}`);\n                });\n            } else {\n                next();\n            }\n        }\n\n        return this.initializeDeferral.Promise();\n    }\n\n    public Id = (): string => {\n        return this.id;\n    }\n\n    public Attach = (audioNodeId: string): Promise<IAudioStreamNode> => {\n        this.OnEvent(new AudioStreamNodeAttachingEvent(this.id, audioNodeId));\n\n        return this.Listen(audioNodeId).OnSuccessContinueWith<IAudioStreamNode>(\n            (streamReader: StreamReader<ArrayBuffer>) => {\n                this.OnEvent(new AudioStreamNodeAttachedEvent(this.id, audioNodeId));\n                return {\n                    Detach: () => {\n                        streamReader.Close();\n                        delete this.streams[audioNodeId];\n                        this.OnEvent(new AudioStreamNodeDetachedEvent(this.id, audioNodeId));\n                        this.TurnOff();\n                    },\n                    Id: () => {\n                        return audioNodeId;\n                    },\n                    Read: () => {\n                        return streamReader.Read();\n                    },\n                };\n            });\n    }\n\n    public Detach = (audioNodeId: string): void => {\n        if (audioNodeId && this.streams[audioNodeId]) {\n            this.streams[audioNodeId].Close();\n            delete this.streams[audioNodeId];\n            this.OnEvent(new AudioStreamNodeDetachedEvent(this.id, audioNodeId));\n        }\n    }\n\n    public TurnOff = (): Promise<boolean> => {\n        for (const streamId in this.streams) {\n            if (streamId) {\n                const stream = this.streams[streamId];\n                if (stream) {\n                    stream.Close();\n                }\n            }\n        }\n\n        this.OnEvent(new AudioSourceOffEvent(this.id)); // no stream now\n        this.initializeDeferral = null;\n\n        this.DestroyAudioContext();\n\n        return PromiseHelper.FromResult(true);\n    }\n\n    public get Events(): EventSource<AudioSourceEvent> {\n        return this.events;\n    }\n\n    private Listen = (audioNodeId: string): Promise<StreamReader<ArrayBuffer>> => {\n        return this.TurnOn()\n            .OnSuccessContinueWith<StreamReader<ArrayBuffer>>((_: boolean) => {\n                const stream = new Stream<ArrayBuffer>(audioNodeId);\n                this.streams[audioNodeId] = stream;\n\n                try {\n                    this.recorder.Record(this.context, this.mediaStream, stream);\n                } catch (error) {\n                    this.OnEvent(new AudioStreamNodeErrorEvent(this.id, audioNodeId, error));\n                    throw error;\n                }\n\n                return stream.GetReader();\n            });\n    }\n\n    private OnEvent = (event: AudioSourceEvent): void => {\n        this.events.OnEvent(event);\n        Events.Instance.OnEvent(event);\n    }\n\n    private CreateAudioContext = (): void => {\n        if (!!this.context) {\n            return;\n        }\n\n        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext\n        const AudioContext = ((window as any).AudioContext)\n        || ((window as any).webkitAudioContext)\n        || false;\n\n        if (!AudioContext) {\n            throw new Error(\"Browser does not support Web Audio API (AudioContext is not available).\");\n        }\n\n        this.context = new AudioContext();\n    }\n\n    private DestroyAudioContext = (): void => {\n        if (!this.context) {\n            return;\n        }\n\n        this.recorder.ReleaseMediaResources(this.context);\n\n        if (\"close\" in this.context) {\n            this.context.close();\n            this.context = null;\n        } else if (this.context.state === \"running\") {\n            // Suspend actually takes a callback, but analogous to the\n            // resume method, it'll be only fired if suspend is called\n            // in a direct response to a user action. The later is not always\n            // the case, as TurnOff is also called, when we receive an\n            // end-of-speech message from the service. So, doing a best effort\n            // fire-and-forget here.\n            this.context.suspend();\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/common.browser/MicAudioSource.ts","import { Stream } from \"../common/Exports\";\nimport { IRecorder } from \"./IRecorder\";\n\n// getting around the build error for MediaRecorder as Typescript does not have a definition for this one.\ndeclare var MediaRecorder: any;\n\nexport class OpusRecorder implements IRecorder {\n    private mediaResources: IMediaResources;\n    private mediaRecorderOptions: any;\n\n    constructor(options?: { mimeType: string, bitsPerSecond: number }) {\n        this.mediaRecorderOptions = options;\n    }\n\n    public Record = (context: AudioContext, mediaStream: MediaStream, outputStream: Stream<ArrayBuffer>): void => {\n        const mediaRecorder: any = new MediaRecorder(mediaStream, this.mediaRecorderOptions);\n        const timeslice = 100; // this is in ms - 100 ensures that the chunk doesn't exceed the max size of chunk allowed in WS connection\n        mediaRecorder.ondataavailable = (dataAvailableEvent: any) => {\n            if (outputStream) {\n                const reader = new FileReader();\n                reader.readAsArrayBuffer(dataAvailableEvent.data);\n                reader.onloadend = (event: ProgressEvent) => {\n                    outputStream.Write(reader.result);\n                };\n            }\n        };\n\n        this.mediaResources = {\n            recorder: mediaRecorder,\n            stream: mediaStream,\n        };\n        mediaRecorder.start(timeslice);\n    }\n\n    public ReleaseMediaResources = (context: AudioContext): void => {\n        if (this.mediaResources.recorder.state !== \"inactive\") {\n            this.mediaResources.recorder.stop();\n        }\n        this.mediaResources.stream.getTracks().forEach((track: any) => track.stop());\n    }\n}\n\ninterface IMediaResources {\n    stream: MediaStream;\n    recorder: any;\n}\n\n/* Declaring this inline to avoid compiler warnings\ndeclare class MediaRecorder {\n    constructor(mediaStream: MediaStream, options: any);\n\n    public state: string;\n\n    public ondataavailable(dataAvailableEvent: any): void;\n    public stop(): void;\n}*/\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/common.browser/OpusRecorder.ts","import { RiffPcmEncoder, Stream } from \"../common/Exports\";\nimport { IRecorder } from \"./IRecorder\";\n\nexport class PcmRecorder implements IRecorder {\n    private mediaResources: IMediaResources;\n\n    public Record = (context: AudioContext, mediaStream: MediaStream, outputStream: Stream<ArrayBuffer>): void => {\n        const desiredSampleRate = 16000;\n\n        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createScriptProcessor\n        const scriptNode = (() => {\n            let bufferSize = 0;\n            try {\n                return context.createScriptProcessor(bufferSize, 1, 1);\n            } catch (error) {\n                // Webkit (<= version 31) requires a valid bufferSize.\n                bufferSize = 2048;\n                let audioSampleRate = context.sampleRate;\n                while (bufferSize < 16384 && audioSampleRate >= (2 * desiredSampleRate)) {\n                    bufferSize <<= 1 ;\n                    audioSampleRate >>= 1;\n                }\n                return context.createScriptProcessor(bufferSize, 1, 1);\n            }\n        })();\n\n        const waveStreamEncoder = new RiffPcmEncoder(context.sampleRate, desiredSampleRate);\n        let needHeader: boolean = true;\n        const that = this;\n        scriptNode.onaudioprocess = (event: AudioProcessingEvent) => {\n            const inputFrame = event.inputBuffer.getChannelData(0);\n\n            if (outputStream && !outputStream.IsClosed) {\n                const waveFrame = waveStreamEncoder.Encode(needHeader, inputFrame);\n                if (!!waveFrame) {\n                    outputStream.Write(waveFrame);\n                    needHeader = false;\n                }\n            }\n        };\n\n        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaStreamSource\n        const micInput = context.createMediaStreamSource(mediaStream);\n\n        this.mediaResources = {\n            scriptProcessorNode: scriptNode,\n            source: micInput,\n            stream: mediaStream,\n        };\n\n        micInput.connect(scriptNode);\n        scriptNode.connect(context.destination);\n    }\n\n    public ReleaseMediaResources = (context: AudioContext): void => {\n        if (this.mediaResources) {\n            if (this.mediaResources.scriptProcessorNode) {\n                this.mediaResources.scriptProcessorNode.disconnect(context.destination);\n                this.mediaResources.scriptProcessorNode = null;\n            }\n            if (this.mediaResources.source) {\n                this.mediaResources.source.disconnect();\n                this.mediaResources.stream.getTracks().forEach((track: any) => track.stop());\n                this.mediaResources.source = null;\n            }\n        }\n    }\n}\n\ninterface IMediaResources {\n    source: MediaStreamAudioSourceNode;\n    scriptProcessorNode: ScriptProcessorNode;\n    stream: MediaStream;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/common.browser/PCMRecorder.ts","import { ArgumentNullError, IKeyValueStorage } from \"../common/Exports\";\n\nexport class SessionStorage implements IKeyValueStorage {\n\n    public Get = (key: string): string => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        return sessionStorage.getItem(key);\n    }\n\n    public GetOrAdd = (key: string, valueToAdd: string): string => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        const value = sessionStorage.getItem(key);\n        if (value === null || value === undefined) {\n            sessionStorage.setItem(key, valueToAdd);\n        }\n\n        return sessionStorage.getItem(key);\n    }\n\n    public Set = (key: string, value: string): void => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        sessionStorage.setItem(key, value);\n    }\n\n    public Remove = (key: string): void => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        sessionStorage.removeItem(key);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/common.browser/SessionStorage.ts","import { ITimer } from \"../common/Exports\";\n\nexport class Timer implements ITimer {\n    private delayInMillisec: number;\n    private timerId: number;\n    private successCallback: any;\n    constructor(delayInMillisec: number, successCallback: any) {\n        this.delayInMillisec = delayInMillisec;\n        this.successCallback = successCallback;\n    }\n    public start = (...params: any[]): void => {\n        if (this.timerId) {\n            this.stop();\n        }\n        this.timerId = setTimeout(this.successCallback, this.delayInMillisec, params);\n    }\n\n    public stop = (): void => {\n        clearTimeout(this.timerId);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/common.browser/Timer.ts","import {\n    ArgumentNullError,\n    ConnectionEvent,\n    ConnectionMessage,\n    ConnectionOpenResponse,\n    ConnectionState,\n    CreateNoDashGuid,\n    EventSource,\n    IConnection,\n    IStringDictionary,\n    IWebsocketMessageFormatter,\n    PlatformEvent,\n    Promise,\n} from \"../common/Exports\";\nimport { WebsocketMessageAdapter } from \"./WebsocketMessageAdapter\";\n\nexport class WebsocketConnection implements IConnection {\n\n    private uri: string;\n    private messageFormatter: IWebsocketMessageFormatter;\n    private connectionMessageAdapter: WebsocketMessageAdapter;\n    private id: string;\n    private isDisposed: boolean = false;\n\n    public constructor(\n        uri: string,\n        queryParameters: IStringDictionary<string>,\n        headers: IStringDictionary<string>,\n        messageFormatter: IWebsocketMessageFormatter,\n        connectionId?: string) {\n\n        if (!uri) {\n            throw new ArgumentNullError(\"uri\");\n        }\n\n        if (!messageFormatter) {\n            throw new ArgumentNullError(\"messageFormatter\");\n        }\n\n        this.messageFormatter = messageFormatter;\n\n        let queryParams = \"\";\n        let i = 0;\n\n        if (queryParameters) {\n            for (const paramName in queryParameters) {\n                if (paramName) {\n                    queryParams += i === 0 ? \"?\" : \"&\";\n                    const val = encodeURIComponent(queryParameters[paramName]);\n                    queryParams += `${paramName}=${val}`;\n                    i++;\n                }\n            }\n        }\n\n        if (headers) {\n            for (const headerName in headers) {\n                if (headerName) {\n                    queryParams += i === 0 ? \"?\" : \"&\";\n                    const val = encodeURIComponent(headers[headerName]);\n                    queryParams += `${headerName}=${val}`;\n                    i++;\n                }\n            }\n        }\n\n        this.uri = uri + queryParams;\n        this.id = connectionId ? connectionId : CreateNoDashGuid();\n\n        this.connectionMessageAdapter = new WebsocketMessageAdapter(\n            this.uri,\n            this.Id,\n            this.messageFormatter);\n    }\n\n    public Dispose = (): void => {\n        this.isDisposed = true;\n\n        if (this.connectionMessageAdapter) {\n            this.connectionMessageAdapter.Close();\n        }\n    }\n\n    public IsDisposed = (): boolean => {\n        return this.isDisposed;\n    }\n\n    public get Id(): string {\n        return this.id;\n    }\n\n    public State = (): ConnectionState => {\n        return this.connectionMessageAdapter.State;\n    }\n\n    public Open = (): Promise<ConnectionOpenResponse> => {\n        return this.connectionMessageAdapter.Open();\n    }\n\n    public Send = (message: ConnectionMessage): Promise<boolean> => {\n        return this.connectionMessageAdapter.Send(message);\n    }\n\n    public Read = (): Promise<ConnectionMessage> => {\n        return this.connectionMessageAdapter.Read();\n    }\n\n    public get Events(): EventSource<ConnectionEvent> {\n        return this.connectionMessageAdapter.Events;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/common.browser/WebsocketConnection.ts","import { EventType, PlatformEvent } from \"./PlatformEvent\";\n\nexport class AudioSourceEvent extends PlatformEvent {\n    private audioSourceId: string;\n\n    constructor(eventName: string, audioSourceId: string, eventType: EventType = EventType.Info) {\n        super(eventName, eventType);\n        this.audioSourceId = audioSourceId;\n    }\n\n    public get AudioSourceId(): string {\n        return this.audioSourceId;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class AudioSourceInitializingEvent extends AudioSourceEvent {\n    constructor(audioSourceId: string) {\n        super(\"AudioSourceInitializingEvent\", audioSourceId);\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class AudioSourceReadyEvent extends AudioSourceEvent {\n    constructor(audioSourceId: string) {\n        super(\"AudioSourceReadyEvent\", audioSourceId);\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class AudioSourceOffEvent extends AudioSourceEvent {\n    constructor(audioSourceId: string) {\n        super(\"AudioSourceOffEvent\", audioSourceId);\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class AudioSourceErrorEvent extends AudioSourceEvent {\n    private error: string;\n    constructor(audioSourceId: string, error: string) {\n        super(\"AudioSourceErrorEvent\", audioSourceId, EventType.Error);\n        this.error = error;\n    }\n\n    public get Error(): string {\n        return this.error;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class AudioStreamNodeEvent extends AudioSourceEvent {\n    private audioNodeId: string;\n\n    constructor(eventName: string, audioSourceId: string, audioNodeId: string) {\n        super(eventName, audioSourceId);\n        this.audioNodeId = audioNodeId;\n    }\n\n    public get AudioNodeId(): string {\n        return this.audioNodeId;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class AudioStreamNodeAttachingEvent extends AudioStreamNodeEvent {\n    constructor(audioSourceId: string, audioNodeId: string) {\n        super(\"AudioStreamNodeAttachingEvent\", audioSourceId, audioNodeId);\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class AudioStreamNodeAttachedEvent extends AudioStreamNodeEvent {\n    constructor(audioSourceId: string, audioNodeId: string) {\n        super(\"AudioStreamNodeAttachedEvent\", audioSourceId, audioNodeId);\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class AudioStreamNodeDetachedEvent extends AudioStreamNodeEvent {\n    constructor(audioSourceId: string, audioNodeId: string) {\n        super(\"AudioStreamNodeDetachedEvent\", audioSourceId, audioNodeId);\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class AudioStreamNodeErrorEvent extends AudioStreamNodeEvent {\n    private error: string;\n\n    constructor(audioSourceId: string, audioNodeId: string, error: string) {\n        super(\"AudioStreamNodeErrorEvent\", audioSourceId, audioNodeId);\n        this.error = error;\n    }\n\n    public get Error(): string {\n        return this.error;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/common/AudioSourceEvents.ts","import { ConnectionMessage } from \"./ConnectionMessage\";\nimport { IStringDictionary } from \"./IDictionary\";\nimport { EventType, PlatformEvent } from \"./PlatformEvent\";\n\nexport class ConnectionEvent extends PlatformEvent {\n    private connectionId: string;\n\n    constructor(eventName: string, connectionId: string, eventType: EventType = EventType.Info) {\n        super(eventName, eventType);\n        this.connectionId = connectionId;\n    }\n\n    public get ConnectionId(): string {\n        return this.connectionId;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class ConnectionStartEvent extends ConnectionEvent {\n    private uri: string;\n    private headers: IStringDictionary<string>;\n\n    constructor(connectionId: string, uri: string, headers?: IStringDictionary<string>) {\n        super(\"ConnectionStartEvent\", connectionId);\n        this.uri = uri;\n        this.headers = headers;\n    }\n\n    public get Uri(): string {\n        return this.uri;\n    }\n\n    public get Headers(): IStringDictionary<string> {\n        return this.headers;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class ConnectionEstablishedEvent extends ConnectionEvent {\n    constructor(connectionId: string, metadata?: IStringDictionary<string>) {\n        super(\"ConnectionEstablishedEvent\", connectionId);\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class ConnectionClosedEvent extends ConnectionEvent {\n    private reason: string;\n    private statusCode: number;\n\n    constructor(connectionId: string, statusCode: number, reason: string) {\n        super(\"ConnectionClosedEvent\", connectionId, EventType.Warning);\n        this.reason = reason;\n        this.statusCode = statusCode;\n    }\n\n    public get Reason(): string {\n        return this.reason;\n    }\n\n    public get StatusCode(): number {\n        return this.statusCode;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class ConnectionEstablishErrorEvent extends ConnectionEvent {\n    private statusCode: number;\n    private reason: string;\n\n    constructor(connectionId: string, statuscode: number, reason: string) {\n        super(\"ConnectionEstablishErrorEvent\", connectionId, EventType.Error);\n        this.statusCode = statuscode;\n        this.reason = reason;\n    }\n\n    public get Reason(): string {\n        return this.reason;\n    }\n\n    public get StatusCode(): number {\n        return this.statusCode;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class ConnectionMessageReceivedEvent extends ConnectionEvent {\n    private networkReceivedTime: string;\n    private message: ConnectionMessage;\n\n    constructor(connectionId: string, networkReceivedTimeISO: string, message: ConnectionMessage) {\n        super(\"ConnectionMessageReceivedEvent\", connectionId);\n        this.networkReceivedTime = networkReceivedTimeISO;\n        this.message = message;\n    }\n\n    public get NetworkReceivedTime(): string {\n        return this.networkReceivedTime;\n    }\n\n    public get Message(): ConnectionMessage {\n        return this.message;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class ConnectionMessageSentEvent extends ConnectionEvent {\n    private networkSentTime: string;\n    private message: ConnectionMessage;\n\n    constructor(connectionId: string, networkSentTimeISO: string, message: ConnectionMessage) {\n        super(\"ConnectionMessageSentEvent\", connectionId);\n        this.networkSentTime = networkSentTimeISO;\n        this.message = message;\n    }\n\n    public get NetworkSentTime(): string {\n        return this.networkSentTime;\n    }\n\n    public get Message(): ConnectionMessage {\n        return this.message;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/common/ConnectionEvents.ts","\nexport class ConnectionOpenResponse {\n    private statusCode: number;\n    private reason: string;\n\n    constructor(statusCode: number, reason: string) {\n        this.statusCode = statusCode;\n        this.reason = reason;\n    }\n\n    public get StatusCode(): number {\n        return this.statusCode;\n    }\n\n    public get Reason(): string {\n        return this.reason;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/common/ConnectionOpenResponse.ts","import { ArgumentNullError } from \"./Error\";\nimport { EventSource } from \"./EventSource\";\nimport { IEventSource } from \"./IEventSource\";\nimport { PlatformEvent } from \"./PlatformEvent\";\n\nexport class Events {\n    private static instance: IEventSource<PlatformEvent> = new EventSource<PlatformEvent>();\n\n    public static SetEventSource = (eventSource: IEventSource<PlatformEvent>): void => {\n        if (!eventSource) {\n            throw new ArgumentNullError(\"eventSource\");\n        }\n\n        Events.instance = eventSource;\n    }\n\n    public static get Instance(): IEventSource<PlatformEvent> {\n        return Events.instance;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/common/Events.ts","import { ConnectionEvent } from \"./ConnectionEvents\";\nimport { ConnectionMessage } from \"./ConnectionMessage\";\nimport { ConnectionOpenResponse } from \"./ConnectionOpenResponse\";\nimport { EventSource } from \"./EventSource\";\nimport { IDisposable } from \"./IDisposable\";\nimport { Promise } from \"./Promise\";\n\nexport enum ConnectionState {\n    None,\n    Connected,\n    Connecting,\n    Disconnected,\n}\n\nexport interface IConnection extends IDisposable {\n    Id: string;\n    State(): ConnectionState;\n    Open(): Promise<ConnectionOpenResponse>;\n    Send(message: ConnectionMessage): Promise<boolean>;\n    Read(): Promise<ConnectionMessage>;\n    Events: EventSource<ConnectionEvent>;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/common/IConnection.ts","import { MessageType } from \"./ConnectionMessage\";\nimport { ArgumentNullError, InvalidOperationError } from \"./Error\";\nimport { CreateNoDashGuid } from \"./Guid\";\n\nexport class RawWebsocketMessage {\n\n    private messageType: MessageType;\n    private payload: any = null;\n    private id: string;\n\n    public constructor(messageType: MessageType, payload: any, id?: string) {\n        if (!payload) {\n            throw new ArgumentNullError(\"payload\");\n        }\n\n        if (messageType === MessageType.Binary && !(payload instanceof ArrayBuffer)) {\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\n        }\n\n        if (messageType === MessageType.Text && !(typeof (payload) === \"string\")) {\n            throw new InvalidOperationError(\"Payload must be a string\");\n        }\n\n        this.messageType = messageType;\n        this.payload = payload;\n        this.id = id ? id : CreateNoDashGuid();\n    }\n\n    public get MessageType(): MessageType {\n        return this.messageType;\n    }\n\n    public get Payload(): any {\n        return this.payload;\n    }\n\n    public get TextContent(): string {\n        if (this.messageType === MessageType.Binary) {\n            throw new InvalidOperationError(\"Not supported for binary message\");\n        }\n\n        return this.payload as string;\n    }\n\n    public get BinaryContent(): ArrayBuffer {\n        if (this.messageType === MessageType.Text) {\n            throw new InvalidOperationError(\"Not supported for text message\");\n        }\n\n        return this.payload;\n    }\n\n    public get Id(): string {\n        return this.id;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/common/RawWebsocketMessage.ts","\nexport class RiffPcmEncoder {\n\n    private actualSampleRate: number;\n    private desiredSampleRate: number;\n    private channelCount: number = 1;\n\n    public constructor(actualSampleRate: number, desiredSampleRate: number) {\n        this.actualSampleRate = actualSampleRate;\n        this.desiredSampleRate = desiredSampleRate;\n    }\n\n    public Encode = (\n        needHeader: boolean,\n        actualAudioFrame: Float32Array): ArrayBuffer => {\n\n        const audioFrame = this.DownSampleAudioFrame(actualAudioFrame, this.actualSampleRate, this.desiredSampleRate);\n\n        if (!audioFrame) {\n            return null;\n        }\n\n        const audioLength = audioFrame.length * 2;\n\n        if (!needHeader) {\n            const buffer = new ArrayBuffer(audioLength);\n            const view = new DataView(buffer);\n            this.FloatTo16BitPCM(view, 0, audioFrame);\n\n            return buffer;\n        }\n\n        const buffer = new ArrayBuffer(44 + audioLength);\n\n        const bitsPerSample = 16;\n        const bytesPerSample = bitsPerSample / 8;\n        // We dont know ahead of time about the length of audio to stream. So set to 0.\n        const fileLength = 0;\n\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n        const view = new DataView(buffer);\n\n        /* RIFF identifier */\n        this.SetString(view, 0, \"RIFF\");\n        /* file length */\n        view.setUint32(4, fileLength, true);\n        /* RIFF type & Format */\n        this.SetString(view, 8, \"WAVEfmt \");\n        /* format chunk length */\n        view.setUint32(16, 16, true);\n        /* sample format (raw) */\n        view.setUint16(20, 1, true);\n        /* channel count */\n        view.setUint16(22, this.channelCount, true);\n        /* sample rate */\n        view.setUint32(24, this.desiredSampleRate, true);\n        /* byte rate (sample rate * block align) */\n        view.setUint32(28, this.desiredSampleRate * this.channelCount * bytesPerSample, true);\n        /* block align (channel count * bytes per sample) */\n        view.setUint16(32, this.channelCount * bytesPerSample, true);\n        /* bits per sample */\n        view.setUint16(34, bitsPerSample, true);\n        /* data chunk identifier */\n        this.SetString(view, 36, \"data\");\n        /* data chunk length */\n        view.setUint32(40, fileLength, true);\n\n        this.FloatTo16BitPCM(view, 44, audioFrame);\n\n        return buffer;\n    }\n\n    private SetString = (view: DataView, offset: number, str: string): void => {\n        for (let i = 0; i < str.length; i++) {\n            view.setUint8(offset + i, str.charCodeAt(i));\n        }\n    }\n\n    private FloatTo16BitPCM = (view: DataView, offset: number, input: Float32Array): void => {\n        for (let i = 0; i < input.length; i++ , offset += 2) {\n            const s = Math.max(-1, Math.min(1, input[i]));\n            view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\n        }\n    }\n\n    private DownSampleAudioFrame = (\n        srcFrame: Float32Array,\n        srcRate: number,\n        dstRate: number): Float32Array => {\n\n        if (dstRate === srcRate || dstRate > srcRate) {\n            return srcFrame;\n        }\n\n        const ratio = srcRate / dstRate;\n        const dstLength = Math.round(srcFrame.length / ratio);\n        const dstFrame = new Float32Array(dstLength);\n        let srcOffset = 0;\n        let dstOffset = 0;\n        while (dstOffset < dstLength) {\n            const nextSrcOffset = Math.round((dstOffset + 1) * ratio);\n            let accum = 0;\n            let count = 0;\n            while (srcOffset < nextSrcOffset && srcOffset < srcFrame.length) {\n                accum += srcFrame[srcOffset++];\n                count++;\n            }\n            dstFrame[dstOffset++] = accum / count;\n        }\n\n        return dstFrame;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/common/RiffPcmEncoder.ts","import { ArgumentNullError } from \"./Error\";\nimport { IKeyValueStorage } from \"./IKeyValueStorage\";\nimport { InMemoryStorage } from \"./InMemoryStorage\";\n\nexport class Storage {\n    private static sessionStorage: IKeyValueStorage = new InMemoryStorage();\n    private static localStorage: IKeyValueStorage = new InMemoryStorage();\n\n    public static SetSessionStorage = (sessionStorage: IKeyValueStorage): void => {\n        if (!sessionStorage) {\n            throw new ArgumentNullError(\"sessionStorage\");\n        }\n\n        Storage.sessionStorage = sessionStorage;\n    }\n\n    public static SetLocalStorage = (localStorage: IKeyValueStorage): void => {\n        if (!localStorage) {\n            throw new ArgumentNullError(\"localStorage\");\n        }\n\n        Storage.localStorage = localStorage;\n    }\n\n    public static get Session(): IKeyValueStorage {\n        return Storage.sessionStorage;\n    }\n\n    public static get Local(): IKeyValueStorage {\n        return Storage.localStorage;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/common/Storage.ts","import { InvalidOperationError } from \"./Error\";\nimport { CreateNoDashGuid } from \"./Guid\";\nimport { IStringDictionary } from \"./IDictionary\";\nimport { Promise } from \"./Promise\";\nimport { Queue } from \"./Queue\";\nimport { IStreamChunk } from \"./Stream\";\n\nexport interface IStreamChunk<TBuffer> {\n    IsEnd: boolean;\n    Buffer: TBuffer;\n}\n\nexport class Stream<TBuffer> {\n    private id: string;\n    private readerIdCounter: number = 1;\n    private streambuffer: Array<IStreamChunk<TBuffer>>;\n    private isEnded: boolean = false;\n    private readerQueues: IStringDictionary<Queue<IStreamChunk<TBuffer>>>;\n\n    public constructor(streamId?: string) {\n        this.id = streamId ? streamId : CreateNoDashGuid();\n        this.streambuffer = [];\n        this.readerQueues = {};\n    }\n\n    public get IsClosed(): boolean {\n        return this.isEnded;\n    }\n\n    public get Id(): string {\n        return this.id;\n    }\n\n    public Write = (buffer: TBuffer): void => {\n        this.ThrowIfClosed();\n        this.WriteStreamChunk({\n            Buffer: buffer,\n            IsEnd: false,\n        });\n    }\n\n    public GetReader = (): StreamReader<TBuffer> => {\n        const readerId = this.readerIdCounter;\n        this.readerIdCounter++;\n        const readerQueue = new Queue<IStreamChunk<TBuffer>>();\n        const currentLength = this.streambuffer.length;\n        this.readerQueues[readerId] = readerQueue;\n        for (let i = 0; i < currentLength; i++) {\n            readerQueue.Enqueue(this.streambuffer[i]);\n        }\n        return new StreamReader(\n            this.id,\n            readerQueue,\n            () => {\n                delete this.readerQueues[readerId];\n            });\n    }\n\n    public Close = (): void => {\n        if (!this.isEnded) {\n            this.WriteStreamChunk({\n                Buffer: null,\n                IsEnd: true,\n            });\n            this.isEnded = true;\n        }\n    }\n\n    private WriteStreamChunk = (streamChunk: IStreamChunk<TBuffer>): void => {\n        this.ThrowIfClosed();\n        this.streambuffer.push(streamChunk);\n        for (const readerId in this.readerQueues) {\n            if (!this.readerQueues[readerId].IsDisposed()) {\n                try {\n                    this.readerQueues[readerId].Enqueue(streamChunk);\n                } catch (e) {\n                    // Do nothing\n                }\n            }\n        }\n    }\n\n    private ThrowIfClosed = (): void => {\n        if (this.isEnded) {\n            throw new InvalidOperationError(\"Stream closed\");\n        }\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class StreamReader<TBuffer> {\n    private readerQueue: Queue<IStreamChunk<TBuffer>>;\n    private onClose: () => void;\n    private isClosed: boolean = false;\n    private streamId: string;\n\n    public constructor(streamId: string, readerQueue: Queue<IStreamChunk<TBuffer>>, onClose: () => void) {\n        this.readerQueue = readerQueue;\n        this.onClose = onClose;\n        this.streamId = streamId;\n    }\n\n    public get IsClosed(): boolean {\n        return this.isClosed;\n    }\n\n    public get StreamId(): string {\n        return this.streamId;\n    }\n\n    public Read = (): Promise<IStreamChunk<TBuffer>> => {\n        if (this.IsClosed) {\n            throw new InvalidOperationError(\"StreamReader closed\");\n        }\n\n        return this.readerQueue\n            .Dequeue()\n            .OnSuccessContinueWith((streamChunk: IStreamChunk<TBuffer>) => {\n                if (streamChunk.IsEnd) {\n                    this.readerQueue.Dispose(\"End of stream reached\");\n                }\n\n                return streamChunk;\n            });\n    }\n\n    public Close = (): void => {\n        if (!this.isClosed) {\n            this.isClosed = true;\n            this.readerQueue.Dispose(\"StreamReader closed\");\n            this.onClose();\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/common/Stream.ts","\nexport * from \"./Recognizer\";\nexport * from \"./SpeechConnectionFactory\";\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/sdk/speech.browser/Exports.ts","import { FileAudioSource, MicAudioSource, PcmRecorder } from \"../../common.browser/Exports\";\nimport { IAudioSource, Promise, Storage } from \"../../common/Exports\";\nimport { IAuthentication, Recognizer, RecognizerConfig } from \"../speech/Exports\";\nimport { SpeechConnectionFactory } from \"./SpeechConnectionFactory\";\n\nconst CreateRecognizer = (recognizerConfig: RecognizerConfig, authentication: IAuthentication): Recognizer => {\n    return CreateRecognizerWithPcmRecorder(\n        recognizerConfig,\n        authentication);\n};\n\nconst CreateRecognizerWithPcmRecorder = (recognizerConfig: RecognizerConfig, authentication: IAuthentication): Recognizer => {\n    return CreateRecognizerWithCustomAudioSource(\n        recognizerConfig,\n        authentication,\n        new MicAudioSource(new PcmRecorder()));\n};\n\nconst CreateRecognizerWithFileAudioSource = (recognizerConfig: RecognizerConfig, authentication: IAuthentication, file: File): Recognizer =>  {\n    return CreateRecognizerWithCustomAudioSource(\n        recognizerConfig,\n        authentication,\n        new FileAudioSource(file));\n};\n\nconst CreateRecognizerWithCustomAudioSource = (recognizerConfig: RecognizerConfig, authentication: IAuthentication, audioSource: IAudioSource): Recognizer =>  {\n    return new Recognizer (\n        authentication,\n        new SpeechConnectionFactory(),\n        audioSource,\n        recognizerConfig);\n};\n\nexport { CreateRecognizer, CreateRecognizerWithCustomAudioSource, CreateRecognizerWithFileAudioSource, CreateRecognizerWithPcmRecorder };\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/sdk/speech.browser/Recognizer.ts","import { ArgumentNullError, Promise, PromiseHelper } from \"../../common/Exports\";\nimport { AuthInfo, IAuthentication } from \"./IAuthentication\";\n\nconst AuthHeader: string = \"Ocp-Apim-Subscription-Key\";\n\nexport class CognitiveSubscriptionKeyAuthentication implements IAuthentication {\n    private authInfo: AuthInfo;\n\n    constructor(subscriptionKey: string) {\n        if (!subscriptionKey) {\n            throw new ArgumentNullError(\"subscriptionKey\");\n        }\n\n        this.authInfo = new AuthInfo(AuthHeader, subscriptionKey);\n    }\n\n    public Fetch = (authFetchEventId: string): Promise<AuthInfo> => {\n        return PromiseHelper.FromResult(this.authInfo);\n    }\n\n    public FetchOnExpiry = (authFetchEventId: string): Promise<AuthInfo> => {\n        return PromiseHelper.FromResult(this.authInfo);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/sdk/speech/CognitiveSubscriptionKeyAuthentication.ts","import { ArgumentNullError, Promise, PromiseHelper } from \"../../common/Exports\";\nimport { AuthInfo, IAuthentication } from \"./IAuthentication\";\n\nconst AuthHeader: string = \"Authorization\";\n\nexport class CognitiveTokenAuthentication implements IAuthentication {\n    private fetchCallback: (authFetchEventId: string) => Promise<string>;\n    private fetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>;\n\n    constructor(fetchCallback: (authFetchEventId: string) => Promise<string>, fetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>) {\n        if (!fetchCallback) {\n            throw new ArgumentNullError(\"fetchCallback\");\n        }\n\n        if (!fetchOnExpiryCallback) {\n            throw new ArgumentNullError(\"fetchOnExpiryCallback\");\n        }\n\n        this.fetchCallback = fetchCallback;\n        this.fetchOnExpiryCallback = fetchOnExpiryCallback;\n    }\n\n    public Fetch = (authFetchEventId: string): Promise<AuthInfo> => {\n        return  this.fetchCallback(authFetchEventId).OnSuccessContinueWith((token: string) => new AuthInfo(AuthHeader, token));\n    }\n\n    public FetchOnExpiry = (authFetchEventId: string): Promise<AuthInfo> => {\n        return  this.fetchOnExpiryCallback(authFetchEventId).OnSuccessContinueWith((token: string) => new AuthInfo(AuthHeader, token));\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/sdk/speech/CognitiveTokenAuthentication.ts","import {\n    ArgumentNullError,\n    ConnectionMessage,\n    ConnectionOpenResponse,\n    ConnectionState,\n    CreateNoDashGuid,\n    Deferred,\n    Events,\n    IAudioSource,\n    IAudioStreamNode,\n    IConnection,\n    IDetachable,\n    IEventSource,\n    IStreamChunk,\n    MessageType,\n    PlatformEvent,\n    Promise,\n    PromiseHelper,\n    PromiseResult,\n} from \"../../common/Exports\";\nimport { AuthInfo, IAuthentication } from \"./IAuthentication\";\nimport { IConnectionFactory } from \"./IConnectionFactory\";\nimport {\n    ConnectingToServiceEvent,\n    ListeningStartedEvent,\n    RecognitionCompletionStatus,\n    RecognitionEndedEvent,\n    RecognitionStartedEvent,\n    RecognitionTriggeredEvent,\n    SpeechDetailedPhraseEvent,\n    SpeechEndDetectedEvent,\n    SpeechFragmentEvent,\n    SpeechHypothesisEvent,\n    SpeechRecognitionEvent,\n    SpeechRecognitionResultEvent,\n    SpeechSimplePhraseEvent,\n    SpeechStartDetectedEvent,\n} from \"./RecognitionEvents\";\nimport { RecognitionMode, RecognizerConfig, SpeechResultFormat } from \"./RecognizerConfig\";\nimport { ServiceTelemetryListener } from \"./ServiceTelemetryListener.Internal\";\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\nimport {\n    IDetailedSpeechPhrase,\n    ISimpleSpeechPhrase,\n    ISpeechEndDetectedResult,\n    ISpeechFragment,\n    ISpeechStartDetectedResult,\n} from \"./SpeechResults\";\n\nexport class Recognizer {\n    private authentication: IAuthentication;\n    private connectionFactory: IConnectionFactory;\n    private audioSource: IAudioSource;\n    private recognizerConfig: RecognizerConfig;\n    private speechConfigConnectionId: string;\n    private connectionFetchPromise: Promise<IConnection>;\n    private connectionId: string;\n    private authFetchEventId: string;\n\n    public constructor(\n        authentication: IAuthentication,\n        connectionFactory: IConnectionFactory,\n        audioSource: IAudioSource,\n        recognizerConfig: RecognizerConfig) {\n\n        if (!authentication) {\n            throw new ArgumentNullError(\"authentication\");\n        }\n\n        if (!connectionFactory) {\n            throw new ArgumentNullError(\"connectionFactory\");\n        }\n\n        if (!audioSource) {\n            throw new ArgumentNullError(\"audioSource\");\n        }\n\n        if (!recognizerConfig) {\n            throw new ArgumentNullError(\"recognizerConfig\");\n        }\n\n        this.authentication = authentication;\n        this.connectionFactory = connectionFactory;\n        this.audioSource = audioSource;\n        this.recognizerConfig = recognizerConfig;\n    }\n\n    public get AudioSource(): IAudioSource {\n        return this.audioSource;\n    }\n\n    public Recognize = (onEventCallback: (event: SpeechRecognitionEvent) => void, speechContextJson?: string): Promise<boolean> => {\n        const requestSession = new RequestSession(this.audioSource.Id(), onEventCallback);\n        requestSession.ListenForServiceTelemetry(this.audioSource.Events);\n\n        return this.audioSource\n            .Attach(requestSession.AudioNodeId)\n            .ContinueWithPromise<boolean>((result: PromiseResult<IAudioStreamNode>) => {\n                if (result.IsError) {\n                    requestSession.OnAudioSourceAttachCompleted(null, true, result.Error);\n                    throw new Error(result.Error);\n                } else {\n                    requestSession.OnAudioSourceAttachCompleted(result.Result, false);\n                }\n\n                const audioNode = result.Result;\n\n                this.FetchConnection(requestSession)\n                    .OnSuccessContinueWith((connection: IConnection) => {\n                        const messageRetrievalPromise = this.ReceiveMessage(connection, requestSession);\n                        const messageSendPromise = this.SendSpeechConfig(requestSession.RequestId, connection, this.recognizerConfig.SpeechConfig.Serialize())\n                            .OnSuccessContinueWithPromise((_: boolean) => {\n                                return this.SendSpeechContext(requestSession.RequestId, connection, speechContextJson)\n                                    .OnSuccessContinueWithPromise((_: boolean) => {\n                                        return this.SendAudio(requestSession.RequestId, connection, audioNode, requestSession);\n                                    });\n                            });\n\n                        const completionPromise = PromiseHelper.WhenAll([messageRetrievalPromise, messageSendPromise]);\n\n                        completionPromise.On((r: boolean) => {\n                            requestSession.Dispose();\n                            this.SendTelemetryData(requestSession.RequestId, connection, requestSession.GetTelemetry());\n                        }, (error: string) => {\n                            requestSession.Dispose(error);\n                            this.SendTelemetryData(requestSession.RequestId, connection, requestSession.GetTelemetry());\n                        });\n\n                        return completionPromise;\n                    });\n\n                return requestSession.CompletionPromise;\n            });\n    }\n\n    private FetchConnection = (requestSession: RequestSession, isUnAuthorized: boolean = false): Promise<IConnection> => {\n        if (this.connectionFetchPromise) {\n            if (this.connectionFetchPromise.Result().IsError\n                || this.connectionFetchPromise.Result().Result.State() === ConnectionState.Disconnected) {\n                this.connectionId = null;\n                this.connectionFetchPromise = null;\n                return this.FetchConnection(requestSession);\n            } else {\n                requestSession.OnPreConnectionStart(this.authFetchEventId, this.connectionId);\n                requestSession.OnConnectionEstablishCompleted(200);\n                requestSession.ListenForServiceTelemetry(this.connectionFetchPromise.Result().Result.Events);\n                return this.connectionFetchPromise;\n            }\n        }\n\n        this.authFetchEventId = CreateNoDashGuid();\n        this.connectionId = CreateNoDashGuid();\n\n        requestSession.OnPreConnectionStart(this.authFetchEventId, this.connectionId);\n\n        const authPromise = isUnAuthorized ? this.authentication.FetchOnExpiry(this.authFetchEventId) : this.authentication.Fetch(this.authFetchEventId);\n\n        this.connectionFetchPromise = authPromise\n            .ContinueWithPromise((result: PromiseResult<AuthInfo>) => {\n                if (result.IsError) {\n                    requestSession.OnAuthCompleted(true, result.Error);\n                    throw new Error(result.Error);\n                } else {\n                    requestSession.OnAuthCompleted(false);\n                }\n\n                const connection = this.connectionFactory.Create(this.recognizerConfig, result.Result, this.connectionId);\n                requestSession.ListenForServiceTelemetry(connection.Events);\n\n                return connection.Open().OnSuccessContinueWithPromise((response: ConnectionOpenResponse) => {\n                    if (response.StatusCode === 200) {\n                        requestSession.OnConnectionEstablishCompleted(response.StatusCode);\n                        return PromiseHelper.FromResult(connection);\n                    } else if (response.StatusCode === 403 && !isUnAuthorized) {\n                        return this.FetchConnection(requestSession, true);\n                    } else {\n                        requestSession.OnConnectionEstablishCompleted(response.StatusCode, response.Reason);\n                        return PromiseHelper.FromError<IConnection>(`Unable to contact server. StatusCode: ${response.StatusCode}, Reason: ${response.Reason}`);\n                    }\n                });\n            });\n\n        return this.connectionFetchPromise;\n    }\n\n    private ReceiveMessage = (connection: IConnection, requestSession: RequestSession): Promise<boolean> => {\n        return connection\n            .Read()\n            .OnSuccessContinueWithPromise((message: ConnectionMessage) => {\n                const connectionMessage = SpeechConnectionMessage.FromConnectionMessage(message);\n                if (connectionMessage.RequestId.toLowerCase() === requestSession.RequestId.toLowerCase()) {\n                    switch (connectionMessage.Path.toLowerCase()) {\n                        case \"turn.start\":\n                            requestSession.OnServiceTurnStartResponse(JSON.parse(connectionMessage.TextBody));\n                            break;\n                        case \"speech.startDetected\":\n                            requestSession.OnServiceSpeechStartDetectedResponse(JSON.parse(connectionMessage.TextBody));\n                            break;\n                        case \"speech.hypothesis\":\n                            requestSession.OnServiceSpeechHypothesisResponse(JSON.parse(connectionMessage.TextBody));\n                            break;\n                        case \"speech.fragment\":\n                            requestSession.OnServiceSpeechFragmentResponse(JSON.parse(connectionMessage.TextBody));\n                            break;\n                        case \"speech.enddetected\":\n                            requestSession.OnServiceSpeechEndDetectedResponse(JSON.parse(connectionMessage.TextBody));\n                            break;\n                        case \"speech.phrase\":\n                            if (this.recognizerConfig.IsContinuousRecognition) {\n                                // For continuous recognition telemetry has to be sent for every phrase as per spec.\n                                this.SendTelemetryData(requestSession.RequestId, connection, requestSession.GetTelemetry());\n                            }\n                            if (this.recognizerConfig.Format === SpeechResultFormat.Simple) {\n                                requestSession.OnServiceSimpleSpeechPhraseResponse(JSON.parse(connectionMessage.TextBody));\n                            } else {\n                                requestSession.OnServiceDetailedSpeechPhraseResponse(JSON.parse(connectionMessage.TextBody));\n                            }\n                            break;\n                        case \"turn.end\":\n                            requestSession.OnServiceTurnEndResponse();\n                            return PromiseHelper.FromResult(true);\n                        default:\n                            break;\n                    }\n                }\n\n                return this.ReceiveMessage(connection, requestSession);\n            });\n    }\n\n    private SendSpeechConfig = (requestId: string, connection: IConnection, speechConfigJson: string) => {\n        if (speechConfigJson && this.connectionId !== this.speechConfigConnectionId) {\n            this.speechConfigConnectionId = this.connectionId;\n            return connection\n                .Send(new SpeechConnectionMessage(\n                    MessageType.Text,\n                    \"speech.config\",\n                    requestId,\n                    \"application/json\",\n                    speechConfigJson));\n        }\n\n        return PromiseHelper.FromResult(true);\n    }\n\n    private SendSpeechContext = (requestId: string, connection: IConnection, speechContextJson: string) => {\n        if (speechContextJson) {\n            return connection\n                .Send(new SpeechConnectionMessage(\n                    MessageType.Text,\n                    \"speech.context\",\n                    requestId,\n                    \"application/json\",\n                    speechContextJson));\n        }\n        return PromiseHelper.FromResult(true);\n    }\n\n    private SendTelemetryData = (requestId: string, connection: IConnection, telemetryData: string) => {\n        return connection\n            .Send(new SpeechConnectionMessage(\n                MessageType.Text,\n                \"telemetry\",\n                requestId,\n                \"application/json\",\n                telemetryData));\n    }\n\n    private SendAudio = (\n        requestId: string,\n        connection: IConnection,\n        audioStreamNode: IAudioStreamNode,\n        requestSession: RequestSession): Promise<boolean> => {\n            // NOTE: Home-baked promises crash ios safari during the invocation\n            // of the error callback chain (looks like the recursion is way too deep, and\n            // it blows up the stack). The following construct is a stop-gap that does not\n            // bubble the error up the callback chain and hence circumvents this problem.\n            // TODO: rewrite with ES6 promises.\n            const deferred = new Deferred<boolean>();\n\n            const readAndUploadCycle = (_: boolean) => {\n                audioStreamNode.Read().On(\n                    (audioStreamChunk: IStreamChunk<ArrayBuffer>) => {\n                        // we have a new audio chunk to upload.\n                        if (requestSession.IsSpeechEnded) {\n                            // If service already recognized audio end then dont send any more audio\n                            deferred.Resolve(true);\n                            return;\n                        }\n\n                        const payload = (audioStreamChunk.IsEnd) ? null : audioStreamChunk.Buffer;\n                        const uploaded = connection.Send(\n                            new SpeechConnectionMessage(\n                                MessageType.Binary, \"audio\", requestId, null, payload));\n\n                        if (!audioStreamChunk.IsEnd) {\n                            uploaded.OnSuccessContinueWith(readAndUploadCycle);\n                        } else {\n                            // the audio stream has been closed, no need to schedule next\n                            // read-upload cycle.\n                            deferred.Resolve(true);\n                        }\n                    },\n                    (error: string) => {\n                        if (requestSession.IsSpeechEnded) {\n                            // For whatever reason, Reject is used to remove queue subscribers inside\n                            // the Queue.DrainAndDispose invoked from DetachAudioNode down blow, which\n                            // means that sometimes things can be rejected in normal circumstances, without\n                            // any errors.\n                            deferred.Resolve(true); // TODO: remove the argument, it's is completely meaningless.\n                        } else {\n                            // Only reject, if there was a proper error.\n                            deferred.Reject(error);\n                        }\n                    });\n            };\n\n            readAndUploadCycle(true);\n\n            return deferred.Promise();\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nclass RequestSession {\n    private isDisposed: boolean = false;\n    private serviceTelemetryListener: ServiceTelemetryListener;\n    private detachables: IDetachable[] = new Array<IDetachable>();\n    private requestId: string;\n    private audioSourceId: string;\n    private audioNodeId: string;\n    private audioNode: IAudioStreamNode;\n    private authFetchEventId: string;\n    private connectionId: string;\n    private serviceTag: string;\n    private isAudioNodeDetached: boolean = false;\n    private isCompleted: boolean = false;\n    private onEventCallback: (event: SpeechRecognitionEvent) => void;\n\n    private requestCompletionDeferral: Deferred<boolean>;\n\n    constructor(audioSourceId: string, onEventCallback: (event: SpeechRecognitionEvent) => void) {\n        this.audioSourceId = audioSourceId;\n        this.onEventCallback = onEventCallback;\n        this.requestId = CreateNoDashGuid();\n        this.audioNodeId = CreateNoDashGuid();\n        this.requestCompletionDeferral = new Deferred<boolean>();\n\n        this.serviceTelemetryListener = new ServiceTelemetryListener(this.requestId, this.audioSourceId, this.audioNodeId);\n\n        this.OnEvent(new RecognitionTriggeredEvent(this.RequestId, this.audioSourceId, this.audioNodeId));\n    }\n\n    public get RequestId(): string {\n        return this.requestId;\n    }\n\n    public get AudioNodeId(): string {\n        return this.audioNodeId;\n    }\n\n    public get CompletionPromise(): Promise<boolean> {\n        return this.requestCompletionDeferral.Promise();\n    }\n\n    public get IsSpeechEnded(): boolean {\n        return this.isAudioNodeDetached;\n    }\n\n    public get IsCompleted(): boolean {\n        return this.isCompleted;\n    }\n\n    public ListenForServiceTelemetry(eventSource: IEventSource<PlatformEvent>): void {\n        this.detachables.push(eventSource.AttachListener(this.serviceTelemetryListener));\n    }\n\n    public OnAudioSourceAttachCompleted = (audioNode: IAudioStreamNode, isError: boolean, error?: string): void => {\n        this.audioNode = audioNode;\n        if (isError) {\n            this.OnComplete(RecognitionCompletionStatus.AudioSourceError, error);\n        } else {\n            this.OnEvent(new ListeningStartedEvent(this.requestId, this.audioSourceId, this.audioNodeId));\n        }\n    }\n\n    public OnPreConnectionStart = (authFetchEventId: string, connectionId: string): void => {\n        this.authFetchEventId = authFetchEventId;\n        this.connectionId = connectionId;\n        this.OnEvent(new ConnectingToServiceEvent(this.requestId, this.authFetchEventId, this.connectionId));\n    }\n\n    public OnAuthCompleted = (isError: boolean, error?: string): void => {\n        if (isError) {\n            this.OnComplete(RecognitionCompletionStatus.AuthTokenFetchError, error);\n        }\n    }\n\n    public OnConnectionEstablishCompleted = (statusCode: number, reason?: string): void => {\n        if (statusCode === 200) {\n            this.OnEvent(new RecognitionStartedEvent(this.RequestId, this.audioSourceId, this.audioNodeId, this.authFetchEventId, this.connectionId));\n            return;\n        } else if (statusCode === 403) {\n            this.OnComplete(RecognitionCompletionStatus.UnAuthorized, reason);\n        } else {\n            this.OnComplete(RecognitionCompletionStatus.ConnectError, reason);\n        }\n    }\n\n    public OnServiceTurnStartResponse = (response: ITurnStartResponse): void => {\n        if (response && response.context && response.context.serviceTag) {\n            this.serviceTag = response.context.serviceTag;\n        }\n    }\n\n    public OnServiceSpeechStartDetectedResponse = (result: ISpeechStartDetectedResult): void => {\n        this.OnEvent(new SpeechStartDetectedEvent(this.RequestId, result));\n    }\n\n    public OnServiceSpeechHypothesisResponse = (result: ISpeechFragment): void => {\n        this.OnEvent(new SpeechHypothesisEvent(this.RequestId, result));\n    }\n\n    public OnServiceSpeechFragmentResponse = (result: ISpeechFragment): void => {\n        this.OnEvent(new SpeechFragmentEvent(this.RequestId, result));\n    }\n\n    public OnServiceSpeechEndDetectedResponse = (result: ISpeechEndDetectedResult): void => {\n        this.DetachAudioNode();\n        this.OnEvent(new SpeechEndDetectedEvent(this.RequestId, result));\n    }\n\n    public OnServiceSimpleSpeechPhraseResponse = (result: ISimpleSpeechPhrase): void => {\n        this.OnEvent(new SpeechSimplePhraseEvent(this.RequestId, result));\n    }\n\n    public OnServiceDetailedSpeechPhraseResponse = (result: IDetailedSpeechPhrase): void => {\n        this.OnEvent(new SpeechDetailedPhraseEvent(this.RequestId, result));\n    }\n\n    public OnServiceTurnEndResponse = (): void => {\n        this.OnComplete(RecognitionCompletionStatus.Success);\n    }\n\n    public OnConnectionError = (error: string): void => {\n        this.OnComplete(RecognitionCompletionStatus.UnknownError, error);\n    }\n\n    public Dispose = (error?: string): void => {\n        if (!this.isDisposed) {\n            // we should have completed by now. If we did not its an unknown error.\n            this.OnComplete(RecognitionCompletionStatus.UnknownError, error);\n            this.isDisposed = true;\n            for (const detachable of this.detachables) {\n                detachable.Detach();\n            }\n\n            this.serviceTelemetryListener.Dispose();\n        }\n    }\n\n    public GetTelemetry = (): string => {\n        return this.serviceTelemetryListener.GetTelemetry();\n    }\n\n    private OnComplete = (status: RecognitionCompletionStatus, error?: string): void => {\n        if (!this.isCompleted) {\n            this.isCompleted = true;\n            this.DetachAudioNode();\n            this.OnEvent(new RecognitionEndedEvent(this.RequestId, this.audioSourceId, this.audioNodeId, this.authFetchEventId, this.connectionId, this.serviceTag, status, error ? error : \"\"));\n        }\n    }\n\n    private DetachAudioNode = (): void => {\n        if (!this.isAudioNodeDetached) {\n            this.isAudioNodeDetached = true;\n            if (this.audioNode) {\n                this.audioNode.Detach();\n            }\n        }\n    }\n\n    private OnEvent = (event: SpeechRecognitionEvent): void => {\n        this.serviceTelemetryListener.OnEvent(event);\n        Events.Instance.OnEvent(event);\n        if (this.onEventCallback) {\n            this.onEventCallback(event);\n        }\n    }\n}\n\ninterface ITurnStartResponse {\n    context: ITurnStartContext;\n}\n\ninterface ITurnStartContext {\n    serviceTag: string;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/sdk/speech/Recognizer.ts","import {\n    AudioSourceErrorEvent,\n    AudioStreamNodeAttachedEvent,\n    AudioStreamNodeAttachingEvent,\n    AudioStreamNodeDetachedEvent,\n    AudioStreamNodeErrorEvent,\n    ConnectionClosedEvent,\n    ConnectionEstablishedEvent,\n    ConnectionEstablishErrorEvent,\n    ConnectionMessageReceivedEvent,\n    ConnectionStartEvent,\n    IEventListener,\n    IStringDictionary,\n    PlatformEvent,\n} from \"../../common/Exports\";\nimport {\n    ConnectingToServiceEvent,\n    RecognitionTriggeredEvent,\n} from \"./RecognitionEvents\";\n\ninterface ITelemetry {\n    Metrics: IMetric[];\n    ReceivedMessages: IStringDictionary<string[]>;\n}\n\n// tslint:disable-next-line:max-classes-per-file\ninterface IMetric {\n    End: string;\n    Error?: string;\n    Id?: string;\n    Name: string;\n    Start: string;\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class ServiceTelemetryListener implements IEventListener<PlatformEvent> {\n    private isDisposed: boolean = false;\n\n    private requestId: string;\n    private audioSourceId: string;\n    private audioNodeId: string;\n\n    private listeningTriggerMetric: IMetric = null;\n    private micMetric: IMetric = null;\n    private connectionEstablishMetric: IMetric = null;\n\n    private micStartTime: string;\n\n    private connectionId: string;\n    private connectionStartTime: string;\n\n    private receivedMessages: IStringDictionary<string[]>;\n\n    constructor(requestId: string, audioSourceId: string, audioNodeId: string) {\n        this.requestId = requestId;\n        this.audioSourceId = audioSourceId;\n        this.audioNodeId = audioNodeId;\n\n        this.receivedMessages = {};\n    }\n\n    public OnEvent = (e: PlatformEvent): void => {\n        if (this.isDisposed) {\n            return;\n        }\n\n        if (e instanceof RecognitionTriggeredEvent && e.RequestId === this.requestId) {\n            this.listeningTriggerMetric = {\n                End: e.EventTime,\n                Name: \"ListeningTrigger\",\n                Start: e.EventTime,\n            };\n        }\n\n        if (e instanceof AudioStreamNodeAttachingEvent && e.AudioSourceId === this.audioSourceId && e.AudioNodeId === this.audioNodeId) {\n            this.micStartTime = e.EventTime;\n        }\n\n        if (e instanceof AudioStreamNodeAttachedEvent && e.AudioSourceId === this.audioSourceId && e.AudioNodeId === this.audioNodeId) {\n            this.micStartTime = e.EventTime;\n        }\n\n        if (e instanceof AudioSourceErrorEvent && e.AudioSourceId === this.audioSourceId) {\n            if (!this.micMetric) {\n                this.micMetric = {\n                    End: e.EventTime,\n                    Error: e.Error,\n                    Name: \"Microphone\",\n                    Start: this.micStartTime,\n                };\n            }\n        }\n\n        if (e instanceof AudioStreamNodeErrorEvent && e.AudioSourceId === this.audioSourceId && e.AudioNodeId === this.audioNodeId) {\n            if (!this.micMetric) {\n                this.micMetric = {\n                    End: e.EventTime,\n                    Error: e.Error,\n                    Name: \"Microphone\",\n                    Start: this.micStartTime,\n                };\n            }\n        }\n\n        if (e instanceof AudioStreamNodeDetachedEvent && e.AudioSourceId === this.audioSourceId && e.AudioNodeId === this.audioNodeId) {\n            if (!this.micMetric) {\n                this.micMetric = {\n                    End: e.EventTime,\n                    Name: \"Microphone\",\n                    Start: this.micStartTime,\n                };\n            }\n        }\n\n        if (e instanceof ConnectingToServiceEvent && e.RequestId === this.requestId) {\n            this.connectionId = e.ConnectionId;\n        }\n\n        if (e instanceof ConnectionStartEvent && e.ConnectionId === this.connectionId) {\n            this.connectionStartTime = e.EventTime;\n        }\n\n        if (e instanceof ConnectionEstablishedEvent && e.ConnectionId === this.connectionId) {\n            if (!this.connectionEstablishMetric) {\n                this.connectionEstablishMetric = {\n                    End: e.EventTime,\n                    Id: this.connectionId,\n                    Name: \"Connection\",\n                    Start: this.connectionStartTime,\n                };\n            }\n        }\n\n        if (e instanceof ConnectionEstablishErrorEvent && e.ConnectionId === this.connectionId) {\n            if (!this.connectionEstablishMetric) {\n                this.connectionEstablishMetric = {\n                    End: e.EventTime,\n                    Error: this.GetConnectionError(e.StatusCode),\n                    Id: this.connectionId,\n                    Name: \"Connection\",\n                    Start: this.connectionStartTime,\n                };\n            }\n        }\n\n        if (e instanceof ConnectionMessageReceivedEvent && e.ConnectionId === this.connectionId) {\n            if (e.Message && e.Message.Headers && e.Message.Headers.path) {\n                if (!this.receivedMessages[e.Message.Headers.path]) {\n                    this.receivedMessages[e.Message.Headers.path] = new Array<string>();\n                }\n\n                this.receivedMessages[e.Message.Headers.path].push(e.NetworkReceivedTime);\n            }\n        }\n    }\n\n    public GetTelemetry = (): string => {\n        const metrics = new Array<IMetric>();\n\n        if (this.listeningTriggerMetric) {\n            metrics.push(this.listeningTriggerMetric);\n        }\n\n        if (this.micMetric) {\n            metrics.push(this.micMetric);\n        }\n\n        if (this.connectionEstablishMetric) {\n            metrics.push(this.connectionEstablishMetric);\n        }\n\n        const telemetry: ITelemetry = {\n            Metrics: metrics,\n            ReceivedMessages: this.receivedMessages,\n        };\n\n        const json = JSON.stringify(telemetry);\n\n        // We dont want to send the same telemetry again. So clean those out.\n        this.receivedMessages = {};\n        this.listeningTriggerMetric = null;\n        this.micMetric = null;\n        this.connectionEstablishMetric = null;\n\n        return json;\n    }\n\n    public Dispose = (): void => {\n        this.isDisposed = true;\n    }\n\n    private GetConnectionError = (statusCode: number): string => {\n        /*\n        -- Websocket status codes --\n        NormalClosure = 1000,\n        EndpointUnavailable = 1001,\n        ProtocolError = 1002,\n        InvalidMessageType = 1003,\n        Empty = 1005,\n        InvalidPayloadData = 1007,\n        PolicyViolation = 1008,\n        MessageTooBig = 1009,\n        MandatoryExtension = 1010,\n        InternalServerError = 1011\n        */\n\n        switch (statusCode) {\n            case 400:\n            case 1002:\n            case 1003:\n            case 1005:\n            case 1007:\n            case 1008:\n            case 1009: return \"BadRequest\";\n            case 401: return \"Unauthorized\";\n            case 403: return \"Forbidden\";\n            case 503:\n            case 1001: return \"ServerUnavailable\";\n            case 500:\n            case 1011: return \"ServerError\";\n            case 408:\n            case 504: return \"Timeout\";\n            default: return \"statuscode:\" + statusCode.toString();\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/sdk/speech/ServiceTelemetryListener.Internal.ts","import {\n    ArgumentNullError,\n    ConnectionMessage,\n    IStringDictionary,\n    MessageType,\n} from \"../../common/Exports\";\n\nconst PathHeaderName: string = \"path\";\nconst ContentTypeHeaderName: string = \"content-type\";\nconst RequestIdHeaderName: string = \"x-requestid\";\nconst RequestTimestampHeaderName: string = \"x-timestamp\";\n\nexport class SpeechConnectionMessage extends ConnectionMessage {\n\n    private path: string;\n    private requestId: string;\n    private contentType: string;\n    private additionalHeaders: IStringDictionary<string>;\n\n    public constructor(\n        messageType: MessageType,\n        path: string,\n        requestId: string,\n        contentType: string,\n        body: any,\n        additionalHeaders?: IStringDictionary<string>,\n        id?: string) {\n\n        if (!path) {\n            throw new ArgumentNullError(\"path\");\n        }\n\n        if (!requestId) {\n            throw new ArgumentNullError(\"requestId\");\n        }\n\n        const headers: IStringDictionary<string> = {};\n        headers[PathHeaderName] = path;\n        headers[RequestIdHeaderName] = requestId;\n        headers[RequestTimestampHeaderName] = new Date().toISOString();\n        if (contentType) {\n            headers[ContentTypeHeaderName] = contentType;\n        }\n\n        if (additionalHeaders) {\n            for (const headerName in additionalHeaders) {\n                if (headerName) {\n                    headers[headerName] = additionalHeaders[headerName];\n                }\n\n            }\n        }\n\n        if (id) {\n            super(messageType, body, headers, id);\n        } else {\n            super(messageType, body, headers);\n        }\n\n        this.path = path;\n        this.requestId = requestId;\n        this.contentType = contentType;\n        this.additionalHeaders = additionalHeaders;\n    }\n\n    public get Path(): string {\n        return this.path;\n    }\n\n    public get RequestId(): string {\n        return this.requestId;\n    }\n\n    public get ContentType(): string {\n        return this.contentType;\n    }\n\n    public get AdditionalHeaders(): IStringDictionary<string> {\n        return this.additionalHeaders;\n    }\n\n    public static FromConnectionMessage = (message: ConnectionMessage): SpeechConnectionMessage => {\n        let path = null;\n        let requestId = null;\n        let contentType = null;\n        let requestTimestamp = null;\n        const additionalHeaders: IStringDictionary<string> = {};\n\n        if (message.Headers) {\n            for (const headerName in message.Headers) {\n                if (headerName) {\n                    if (headerName.toLowerCase() === PathHeaderName.toLowerCase()) {\n                        path = message.Headers[headerName];\n                    } else if (headerName.toLowerCase() === RequestIdHeaderName.toLowerCase()) {\n                        requestId = message.Headers[headerName];\n                    } else if (headerName.toLowerCase() === RequestTimestampHeaderName.toLowerCase()) {\n                        requestTimestamp = message.Headers[headerName];\n                    } else if (headerName.toLowerCase() === ContentTypeHeaderName.toLowerCase()) {\n                        contentType = message.Headers[headerName];\n                    } else {\n                        additionalHeaders[headerName] = message.Headers[headerName];\n                    }\n                }\n            }\n        }\n\n        return new SpeechConnectionMessage(\n            message.MessageType,\n            path,\n            requestId,\n            contentType,\n            message.Body,\n            additionalHeaders,\n            message.Id);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/sdk/speech/SpeechConnectionMessage.Internal.ts","\nexport enum RecognitionStatus {\n    Success,\n    NoMatch,\n    InitialSilenceTimeout,\n    BabbleTimeout,\n    Error,\n    EndOfDictation,\n}\n\nexport interface ISpeechStartDetectedResult {\n    Offset?: number;\n}\n\nexport interface ISpeechFragment {\n    Text: string;\n    Offset?: number;\n    Duration?: number;\n}\n\nexport interface ISpeechEndDetectedResult {\n    Offset?: number;\n}\n\nexport interface ISimpleSpeechPhrase {\n    RecognitionStatus: RecognitionStatus;\n    DisplayText: string;\n    Duration?: number;\n    Offset?: number;\n}\n\nexport interface IDetailedSpeechPhrase {\n    RecognitionStatus: RecognitionStatus;\n    NBest: IPhrase[];\n    Duration?: number;\n    Offset?: number;\n}\n\nexport interface IPhrase {\n    Confidence?: number;\n    Lexical: string;\n    ITN: string;\n    MaskedITN: string;\n    Display: string;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/sdk/speech/SpeechResults.ts","import {\n    ConnectionMessage,\n    Deferred,\n    IStringDictionary,\n    IWebsocketMessageFormatter,\n    MessageType,\n    Promise,\n    RawWebsocketMessage,\n} from \"../../common/Exports\";\n\nconst CRLF: string = \"\\r\\n\";\n\nexport class WebsocketMessageFormatter implements IWebsocketMessageFormatter {\n\n    public ToConnectionMessage = (message: RawWebsocketMessage): Promise<ConnectionMessage> => {\n        const deferral = new Deferred<ConnectionMessage>();\n\n        try {\n            if (message.MessageType === MessageType.Text) {\n                const textMessage: string = message.TextContent;\n                let headers: IStringDictionary<string> = {};\n                let body: string = null;\n\n                if (textMessage) {\n                    const headerBodySplit = textMessage.split(\"\\r\\n\\r\\n\");\n                    if (headerBodySplit && headerBodySplit.length > 0) {\n                        headers = this.ParseHeaders(headerBodySplit[0]);\n                        if (headerBodySplit.length > 1) {\n                            body = headerBodySplit[1];\n                        }\n                    }\n                }\n\n                deferral.Resolve(new ConnectionMessage(message.MessageType, body, headers, message.Id));\n            } else if (message.MessageType === MessageType.Binary) {\n                const binaryMessage: ArrayBuffer = message.BinaryContent;\n                let headers: IStringDictionary<string> = {};\n                let body: ArrayBuffer = null;\n\n                if (!binaryMessage || binaryMessage.byteLength < 2) {\n                    throw new Error(\"Invalid binary message format. Header length missing.\");\n                }\n\n                const dataView = new DataView(binaryMessage);\n                const headerLength = dataView.getInt16(0);\n\n                if (binaryMessage.byteLength < headerLength + 2) {\n                    throw new Error(\"Invalid binary message format. Header content missing.\");\n                }\n\n                let headersString = \"\";\n                for (let i = 0; i < headerLength; i++) {\n                    headersString += String.fromCharCode((dataView).getInt8(i + 2));\n                }\n\n                headers = this.ParseHeaders(headersString);\n\n                if (binaryMessage.byteLength > headerLength + 2) {\n                    body = binaryMessage.slice(2 + headerLength);\n                }\n\n                deferral.Resolve(new ConnectionMessage(message.MessageType, body, headers, message.Id));\n            }\n        } catch (e) {\n            deferral.Reject(`Error formatting the message. Error: ${e}`);\n        }\n\n        return deferral.Promise();\n    }\n\n    public FromConnectionMessage = (message: ConnectionMessage): Promise<RawWebsocketMessage> => {\n        const deferral = new Deferred<RawWebsocketMessage>();\n\n        try {\n            if (message.MessageType === MessageType.Text) {\n                const payload = `${this.MakeHeaders(message)}${CRLF}${message.TextBody ? message.TextBody : \"\"}`;\n\n                deferral.Resolve(new RawWebsocketMessage(MessageType.Text, payload, message.Id));\n\n            } else if (message.MessageType === MessageType.Binary) {\n                const headersString = this.MakeHeaders(message);\n                const content = message.BinaryBody;\n\n                const headerInt8Array = new Int8Array(this.StringToArrayBuffer(headersString));\n\n                const payload = new ArrayBuffer(2 + headerInt8Array.byteLength + (content ? content.byteLength : 0));\n                const dataView = new DataView(payload);\n\n                dataView.setInt16(0, headerInt8Array.length);\n\n                for (let i = 0; i < headerInt8Array.byteLength; i++) {\n                    dataView.setInt8(2 + i, headerInt8Array[i]);\n                }\n\n                if (content) {\n                    const bodyInt8Array = new Int8Array(content);\n                    for (let i = 0; i < bodyInt8Array.byteLength; i++) {\n                        dataView.setInt8(2 + headerInt8Array.byteLength + i, bodyInt8Array[i]);\n                    }\n                }\n\n                deferral.Resolve(new RawWebsocketMessage(MessageType.Binary, payload, message.Id));\n            }\n        } catch (e) {\n            deferral.Reject(`Error formatting the message. ${e}`);\n        }\n\n        return deferral.Promise();\n    }\n\n    private MakeHeaders = (message: ConnectionMessage): string => {\n        let headersString: string = \"\";\n\n        if (message.Headers) {\n            for (const header in message.Headers) {\n                if (header) {\n                    headersString += `${header}: ${message.Headers[header]}${CRLF}`;\n                }\n            }\n        }\n\n        return headersString;\n    }\n\n    private ParseHeaders = (headersString: string): IStringDictionary<string> => {\n        const headers: IStringDictionary<string> = {};\n\n        if (headersString) {\n            const headerMatches = headersString.match(/[^\\r\\n]+/g);\n            if (headers) {\n                for (const header of headerMatches) {\n                    if (header) {\n                        const separatorIndex = header.indexOf(\":\");\n                        const headerName = separatorIndex > 0 ? header.substr(0, separatorIndex).trim().toLowerCase() : header;\n                        const headerValue =\n                            separatorIndex > 0 && header.length > (separatorIndex + 1) ?\n                                header.substr(separatorIndex + 1).trim() :\n                                \"\";\n\n                        headers[headerName] = headerValue;\n                    }\n                }\n            }\n        }\n\n        return headers;\n    }\n\n    private StringToArrayBuffer = (str: string): ArrayBuffer => {\n        const buffer = new ArrayBuffer(str.length);\n        const view = new DataView(buffer);\n        for (let i = 0; i < str.length; i++) {\n            view.setUint8(i, str.charCodeAt(i));\n        }\n        return buffer;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/microsoft-speech-browser-sdk/src/sdk/speech/WebsocketMessageFormatter.ts","export { SpeechRecognizer } from './SpeechRecognition'\nexport { SpeechSynthesizer, SynthesisGender } from './SpeechSynthesis'\n\n\n\n// WEBPACK FOOTER //\n// ./src/CognitiveServices/lib.ts","// Provide a \"System\" global.\nmodule.exports = {\n\t// Make sure import is only used as \"System.import\"\n\timport: function() {\n\t\tthrow new Error(\"System.import cannot be used indirectly\");\n\t}\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/system.js\n// module id = 60\n// module chunks = 0"],"sourceRoot":""}