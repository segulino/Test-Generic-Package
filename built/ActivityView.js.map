{"version":3,"file":"ActivityView.js","sourceRoot":"","sources":["../src/ActivityView.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAE/B,2CAA8C;AAC9C,uCAAsC;AACtC,iDAAgD;AAIhD,IAAM,SAAS,GAAG,OAAO,CAAC,2BAA2B,CAAC,CAAC;AAEvD,IAAM,WAAW,GAAG,UAAC,KAOpB;IACS,IAAA,+BAAW,EAAE,yCAAgB,EAAE,uEAAc,CAAW;IAChE,EAAE,CAAC,CAAC,CAAC,WAAW,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,CAAC;QAC3C,MAAM,CAAC,IAAI,CAAC;IACd,MAAM,CAAC,gBAAgB,KAAK,UAAU;QACpC,oBAAC,mBAAQ,qBACL,WAAW,EAAG,WAAW,IACnB,UAAU,EAClB;;YAEF,6BAAK,SAAS,EAAC,SAAS,IACpB,WAAW,CAAC,GAAG,CAAC,UAAC,UAAU,EAAE,KAAK;gBAClC,OAAA,oBAAC,2BAAc,IACb,GAAG,EAAG,KAAK,EACX,UAAU,EAAG,UAAU,EACvB,MAAM,EAAG,KAAK,CAAC,MAAM,EACrB,YAAY,EAAG,KAAK,CAAC,YAAY,EACjC,WAAW,EAAG,KAAK,CAAC,WAAW,GAC/B;YANF,CAME,CACH,CACG,CAAA;AACV,CAAC,CAAA;AAUD;IAAkC,wCAAsC;IACtE,sBAAY,KAAwB;eAClC,kBAAM,KAAK,CAAC;IACd,CAAC;IAED,4CAAqB,GAArB,UAAsB,SAA4B;QAChD,qCAAqC;QACrC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,KAAK,SAAS,CAAC,QAAQ;eAE5C,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,SAAS,CAAC,MAAM;eAEtC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,KAAK,SAAS;mBACrC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,gBAAgB,KAAK,UAAU;mBACnD,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI,CAAC,CAAC;IAC7C,CAAC;IAED,6BAAM,GAAN;QACE,IAAM,eAAoC,EAAlC,sBAAQ,EAAE,wCAAwB,CAAC;QAC3C,MAAM,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;YACtB,KAAK,SAAS;gBACZ,MAAM,CAAC,CACL;oBACE,oBAAC,6BAAa,IACZ,IAAI,EAAG,QAAQ,CAAC,IAAI,EACpB,MAAM,EAAG,QAAQ,CAAC,UAAU,EAC5B,WAAW,EAAG,KAAK,CAAC,WAAW,GAC/B;oBACF,oBAAC,WAAW,IACV,WAAW,EAAG,QAAQ,CAAC,WAAW,EAClC,gBAAgB,EAAG,QAAQ,CAAC,gBAAgB,EAC5C,MAAM,EAAG,KAAK,CAAC,MAAM,EACrB,YAAY,EAAG,KAAK,CAAC,YAAY,EACjC,WAAW,EAAG,KAAK,CAAC,WAAW,EAC/B,IAAI,EAAG,KAAK,CAAC,IAAI,GACjB,CACE,CACP,CAAC;YAEJ,KAAK,QAAQ;gBACX,MAAM,CAAC,CACH;oBAAK,6BAAK,SAAS,EAAC,cAAc,EAAC,GAAG,EAAE,SAAS,EAAE,GAAG,EAAC,QAAQ,GAAG,CAAM,CAC3E,CAAC;QACN,CAAC;IACH,CAAC;IACH,mBAAC;AAAD,CAAC,AA5CD,CAAkC,KAAK,CAAC,SAAS,GA4ChD;AA5CY,oCAAY","sourcesContent":["import * as React from 'react';\nimport { Activity, Attachment, AttachmentLayout } from 'botframework-directlinejs';\nimport { AttachmentView } from './Attachment';\nimport { Carousel } from './Carousel';\nimport { FormattedText } from './FormattedText';\nimport { FormatState, SizeState } from './Store';\nimport { IDoCardAction } from './Chat';\n\nconst ic_avatar = require('./assets/ic_avatar@3x.png');\n\nconst Attachments = (props: {\n  attachments: Attachment[],\n  attachmentLayout: AttachmentLayout,\n  format: FormatState,\n  size: SizeState,\n  onCardAction: IDoCardAction,\n  onImageLoad: () => void\n}) => {\n  const { attachments, attachmentLayout, ... otherProps } = props;\n  if (!attachments || attachments.length === 0)\n    return null;\n  return attachmentLayout === 'carousel' ?\n    <Carousel\n        attachments={ attachments }\n        { ... otherProps }\n    />\n  :\n    <div className=\"wc-list\">\n      { attachments.map((attachment, index) =>\n        <AttachmentView\n          key={ index }\n          attachment={ attachment }\n          format={ props.format }\n          onCardAction={ props.onCardAction }\n          onImageLoad={ props.onImageLoad }\n        />\n      ) }\n    </div>\n}\n\nexport interface ActivityViewProps {\n  format: FormatState,\n  size: SizeState,\n  activity: Activity,\n  onCardAction: IDoCardAction,\n  onImageLoad: () => void\n}\n\nexport class ActivityView extends React.Component<ActivityViewProps, {}> {\n  constructor(props: ActivityViewProps) {\n    super(props)\n  }\n\n  shouldComponentUpdate(nextProps: ActivityViewProps) {\n    // if the activity changed, re-render\n    return this.props.activity !== nextProps.activity\n    // if the format changed, re-render\n      || this.props.format !== nextProps.format\n    // if it's a carousel and the size changed, re-render\n      || (this.props.activity.type === 'message'\n        && this.props.activity.attachmentLayout === 'carousel'\n        && this.props.size !== nextProps.size);\n  }\n\n  render() {\n    const { activity, ... props } = this.props;\n    switch (activity.type) {\n      case 'message':\n        return (\n          <div>\n            <FormattedText\n              text={ activity.text }\n              format={ activity.textFormat }\n              onImageLoad={ props.onImageLoad }\n            />\n            <Attachments\n              attachments={ activity.attachments }\n              attachmentLayout={ activity.attachmentLayout }\n              format={ props.format }\n              onCardAction={ props.onCardAction }\n              onImageLoad={ props.onImageLoad }\n              size={ props.size }\n            />\n          </div>\n        );\n\n      case 'typing':\n        return (\n            <div><img className=\"wdrgy-avatar\" src={ic_avatar} alt=\"avatar\" /></div>\n        );\n    }\n  }\n}\n"]}